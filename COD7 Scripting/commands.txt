acousticSpikeMaxRange // The maximum range from the player in world space that objects will be shown on the acoustic spike
acousticSpikeMinRadius // The minimum radius from the center of the sensor that objects will appear.
acousticSpikeMinRange // The minimum range from the player in world space that objects will be shown on the acoustic spike
acousticSpikeRingSize // Max size of the ping ring visual for a sensor
acousticSpikeSize // Scale the acoustic sensor
actionSlotsHide // Hide the actionslots.
activeAction
aim_accel_turnrate_debug // Turn on debugging info for the acceleration
aim_accel_turnrate_enabled // Enable/disable acceleration of the turnrates
aim_accel_turnrate_lerp // The acceleration of the turnrates
aim_aimAssistRangeScale // Scales the weapon's aim assist range
aim_assist_min_target_distance // Aim assist will not work on targets beyond this distance
aim_assist_script_disable // Override aim assist from script: set to true to disable code aim assist (i.e. for meatshield)
aim_autoAimRangeScale // Scales the weapon's auto aim range
aim_autoaim_debug // Turn on auto aim debugging
aim_autoaim_enabled // Turn on auto aim
aim_autoaim_lerp // The rate in degrees per second that the auto aim will converge to its target
aim_autoaim_region_height // The height of the auto aim region in virtual screen coordinates (0 - 480)
aim_autoaim_region_width // The width of the auto aim region in virtual screen coordinates (0 - 640)
aim_autobayonet_range // The range of the auto bayonet
aim_automelee_debug // Turn on auto melee debugging
aim_automelee_enabled // Turn on auto melee
aim_automelee_lerp // The rate in degrees per second that the auto melee will converge to its target
aim_automelee_range // The range of the auto melee
aim_automelee_region_height // The height of the auto melee region in virtual screen coordinates (0 - 480)
aim_automelee_region_width // The width of the auto melee region in virtual screen coordinates (0 - 640)
aim_input_graph_debug // Debug the view input graphs
aim_input_graph_enabled // Use graph for adjusting view input
aim_input_graph_index // Which input graph to use
aim_lockon_debug // Turn on debugging info for aim lock on
aim_lockon_deflection // The amount of stick deflection for the lockon to activate
aim_lockon_enabled // Aim lock on helps the player to stay on target
aim_lockon_pitch_strength // The amount of aim assistance given by the target lock on (pitch)
aim_lockon_region_height // The height of the auto aim region in virtual screen coordinates(0-480)
aim_lockon_region_width // The width of the auto aim region in virtual screen coordinates(0-640)
aim_lockon_strength // The amount of aim assistance given by the target lock on (yaw)
aim_scale_view_axis // Scale the influence of each input axis so that the major axis has more influence on the control
aim_slowdown_debug // Turn on debugging info for aim slowdown
aim_slowdown_enabled // Slowdown the turn rate when the cross hair passes over a target
aim_slowdown_pitch_scale // The vertical aim assist slowdown ratio from the hip
aim_slowdown_pitch_scale_ads // The vertical aim assist slowdown ratio when aiming down the sight
aim_slowdown_region_extended_height // The screen height of the extended aim assist slowdown region
aim_slowdown_region_extended_width // The screen width of the extended aim slowdown region
aim_slowdown_region_height // The screen height of the aim assist slowdown region
aim_slowdown_region_width // The screen width of the aim slowdown region
aim_slowdown_yaw_scale // The horizontal aim assist slowdown ratio from the hip
aim_slowdown_yaw_scale_ads // The horizontal aim assist slowdown ratio when aiming down the sight
aim_target_aim_tag_fast_update_interval // How often the aim target tag is updated instead of pulled from cache inside of the "fast" zone.
aim_target_aim_tag_slow_update_interval // How often the aim target tag is updated instead of pulled from cache inside of the "fast" zone.
aim_target_frustum_expand_fast_updates // The frustum expansion to determine if a target is in the fast interval tag update zone. Positive is inwards.
aim_target_frustum_expand_on_screen // The frustum expansion to determine if a target is on screen. Positive is inwards.
aim_target_frustum_min_distance // If target is inside this distance frustum culling is not applied.
aim_target_sentient_half_height // The radius used to calculate frustum target center for a sentient(actor or player)
aim_target_sentient_radius // The radius used to calculate target bounds for a sentient(actor or player)
aim_target_smp // Use worker threads to add aim target entities
aim_turnrate_pitch // The vertical turn rate for aim assist when firing from the hip
aim_turnrate_pitch_ads // The turn rate up and down for aim assist when aiming down the sight
aim_turnrate_yaw // The horizontal turn rate for aim assist when firing from the hip
aim_turnrate_yaw_ads // The horizontal turn rate for aim assist when aiming down the sight
aim_view_sensitivity_override // override value for view sensitivity
ai_angularYawAccelRate // yaw acceleration rate
ai_angularYawDecelFactor // yaw deceleration factor (decel rate = factor * accel rate)
ai_angularYawEnabled // turn on velocity based body rotation
ai_corpseCount // Maximum number of AI corpses
ai_debugAnimDeltas // Display animation delta debug information
ai_debugClaimedNodes // Enable debugging information claimed status of nodes
ai_debugCoverEntityNum // Display debug info for cover
ai_debugEntIndex // Entity index of an entity to debug
ai_debugFindPath // Display AI 'find path' debugging information
ai_debugFindPathDirect // Display AI 'find direct path' debugging information
ai_debugFindPathLock // Find path lock
ai_debugFindPathWidth // Display paths with the given width
ai_debugMayMove // Display debug information for AI 'may move' calculations
ai_debugMeleeAttackSpots // Enable debugging information for melee attack spots
ai_debugThreatSelection // Enable debugging information for threat selection
ai_disableSpawn // Do not spawn AI
ai_enableBadPlaces // toggle badplaces system on/off
ai_eventDistBadPlace // Distance used for AI event
ai_eventDistBullet // Distance used for AI event
ai_eventDistBulletRunning // Distance used for AI event
ai_eventDistDeath // Distance used for AI event
ai_eventDistExplosion // Distance used for AI event
ai_eventDistFootstep // Distance used for AI event
ai_eventDistFootstepLite // Distance used for AI event
ai_eventDistGrenadePing // Distance used for AI event
ai_eventDistGunShot // Distance used for AI event
ai_eventDistNewEnemy // Distance used for AI event
ai_eventDistPain // Distance used for AI event
ai_eventDistProjImpact // Distance used for AI event
ai_eventDistProjPing // Distance used for AI event
ai_eventDistReact // Distance used for AI event
ai_eventDistSilencedShot // Distance used for AI event
ai_foliageSeeThroughDist // Maximum distance AI ignore foliage for sight trace to targets
ai_friendlySuppression // Whether AI fire will suppression teammates or not.
ai_friendlySuppressionDist // Max distance at which AI suppress teammates
ai_maxAttackerCount // Max number of AI's that will attack one player
ai_meleeDamage // The amount of damage dealt by AI's melee attack
ai_meleeHeight // The height of the AI's melee attack
ai_meleeRange // The maximum range of the AI's melee attack
ai_meleeWidth // The width of the AI's melee attack
ai_moveOrientMode // Debug AI Orient Mode
ai_noDodge // AI won't dodge to the side
ai_noPathToEnemyGiveupTime // Time the AI will continue to attack if the player goes off the path grid.
ai_pathMomentum // Momentum factor for continuing motion in previous direction. 0 for no momentum carry over
ai_pathNegotiationOverlapCost // The distance AI would travel around to avoid going to a negotiation being used. Multiplied by number of users of the negotiation
ai_playerFarAccuracy // Accuracy for AI far away from the player
ai_playerFarRange // Minimum range for AI to use 'far' accuracy
ai_playerNearAccuracy // Accuracy for an AI near to a player
ai_playerNearRange // Maximum range for AI to use 'near' accuracy
ai_showBadPlaces // Display debug information for 'bad places'
ai_showDodge // Display debug information for AI dodging
ai_showNearestNode // Show nodes closest to AI
ai_showNodes // Show AI navigation node debug information
ai_showNodesDist // Maximum distance from the camera at which AI nodes are shown
ai_showPaths // Show AI navigation paths
ai_showPotentialThreatDir // Display AI potential threat direction
ai_showVisData // Display debug information for visibility data
ai_showVisDataDist // Maximum distance for visibility data debugging information to be shown
ai_showVolume // Draw the goal volume and fixed node safe volume for an AI
ai_slowdownMaxYawDiff // max yaw diff used for slowdown cal
ai_slowdownMinRate // anim rate at ai_slowdownMaxYawDiff
ai_slowdownMinYawDiff // min yaw diff before slowdown kicks in
ai_slowdownRateBlendFactor // percent of desired rate that goes into final rate
ai_threatUpdateInterval // AI target threat update interval in milliseconds
ai_turnRate // turn rate for AI
ai_useBetterLookahead // t5 lookahead improvements
ai_useFacingTranslation // whether to use facing to determine direction of translation
ai_useLeanRunAnimations // whether to use lean run animations instead of strafes
allEmblemsPurchased // Allows all emblem icons and layers to be purchased
allEmblemsUnlocked // Unlock all emblem icons and layers
allItemsPurchased // Allows all items to be equiped in Create-a-Class
allItemsUnlocked // Allows all items to be purchased in the Black Market
ammoCounterHide // Hide the Ammo Counter
arcademode // Current game is an arcade mode game
attachmentFilter // attachmentFilter
band_12players // 12 player bandwidth req'd
band_18players // 18 player bandwidth req'd
band_2players // 2 player bandwidth req'd
band_4players // 4 player bandwidth req'd
band_6players // 8 player bandwidth req'd
band_8players // 8 player bandwidth req'd
band_demosystem // demo system bandwidth req'd
barebones_class_mode "0"
basicTrainingFatal // If true, a basic training stats error will cause the game to end, if false a warning is printed to the console and the game continues
bcmp_ally_kill_probability "60"
bcmp_breathing_delay "3"
bcmp_breathing_probability "0"
bcmp_enemy_contact_delay "30"
bcmp_enemy_contact_level_delay "15"
bcmp_incoming_grenade_probability "5"
bcmp_killstreak_incoming_probability "100"
bcmp_kill_inform_probability "40"
bcmp_last_stand_delay "3"
bcmp_pain_delay ".5"
bcmp_pain_small_probability "0"
bcmp_perk_call_probability "100"
bcmp_sniper_kill_probability "20"
bcmp_toss_grenade_probability "20"
bcmp_weapon_delay "2000"
bcmp_weapon_fire_probability "80"
bcmp_weapon_fire_threat_probability "80"
bcmp_weapon_reload_probability "60"
bg_aimSpreadMoveSpeedThreshold // When player is moving faster than this speed, the aim spread will increase
bg_blendTimeOverride // Force all player animations to have this blendtime
bg_bobMax // The maximum allowed bob amplitude
bg_disableWeaponPlantingInWater // Disables being able to plant mines in the water.
bg_drawGrenadeInHand // Whether or not to draw grenade in hand for grenade animations
bg_fallDamageMaxHeight // The height that a player will take maximum damage when falling
bg_fallDamageMinHeight // The height that a player will start to take minimum damage if they fall
bg_foliagesnd_fastinterval // The time between each foliage sound when moving quickly
bg_foliagesnd_maxspeed // The speed that a player must be going to make maximum noise while moving through foliage
bg_foliagesnd_minspeed // The speed that a player must be going to make minimum noise while moving through foliage
bg_foliagesnd_resetinterval // The time interval before foliage sounds are reset after the player has stopped moving
bg_foliagesnd_slowinterval // The time between each foliage sound when moving slowly
bg_forceDurationOverride // Force all player animations to have this duration
bg_forceExplosiveBullets // When set, all bullet weapons will fire explosive rounds (Simulates Perk)
bg_freeCamClipToHeliPatch // Toggles clipping to the heli patch rectangle.
bg_gravity // Gravity in inches per second per second
bg_gunXOffset // This will offset where the bullets come out of the gun
bg_ladder_yawcap // The maximum angle that a player can look around while on a ladder
bg_legYawCrouchTolerance // The amount the player's leg yaw can differ from his torso before moving to match
bg_legYawProneTolerance // The amount the player's leg yaw can differ from his torso before moving to match while prone
bg_legYawTolerance // The amount the player's leg yaw can differ from his torso before moving to match
bg_lowGravity // Low gravity for slow or floaty objects, in inches per second per second
bg_maxGrenadeIndicatorSpeed // Maximum speed of grenade that will show up in indicator and can be thrown back.
bg_maxWeaponAnimScale // The amount which weapon timers can cause player animations to scale their playback speed by
bg_plantInWaterDepth // Min distance a penetrated bullet must travel before it'll trigger the effects
bg_playStandToCrouchAnims // Whether or not to use animations to transition between stand and crouch, if not it just blends
bg_proneSwingSpeed // The rate at which the player's legs swing around when turning and prone
bg_prone_yawcap // The maximum angle that a player can look around quickly while prone
bg_shock_animation // Play the 3rd person animation during shellshock
bg_shock_lookControl // Alter player control during shellshock
bg_shock_lookControl_fadeTime // The time for the shellshock player control to fade in seconds
bg_shock_lookControl_maxpitchspeed // Maximum pitch movement rate while shellshocked in degrees per second
bg_shock_lookControl_maxyawspeed // Maximum yaw movement rate while shell shocked in degrees per second
bg_shock_lookControl_mousesensitivityscale // Sensitivity scale to apply to a shellshocked player
bg_shock_movement // Affect player's movement speed during shellshock
bg_shock_screenBlurBlendFadeTime // The amount of time in seconds for the shellshock effect to fade
bg_shock_screenBlurBlendTime // The amount of time in seconds for the shellshock effect to blend
bg_shock_screenFlashShotFadeTime // In seconds, how soon from the end of the effect to start blending out the screengrab layer.
bg_shock_screenFlashWhiteFadeTime // In seconds, how soon from the end of the effect to start blending out the whiteout layer.
bg_shock_screenType // Shell shock screen effect type
bg_shock_sound // Play shell shock sound
bg_shock_soundDryLevel // Shell shock sound dry level
bg_shock_soundEnd
bg_shock_soundEndAbort
bg_shock_soundFadeInTime // Shell shock sound fade in time in seconds
bg_shock_soundFadeOutTime // Shell shock sound fade out time in seconds
bg_shock_soundLoop
bg_shock_soundLoopEndDelay // Sound loop end offset time from the end of the shellshock in seconds
bg_shock_soundLoopFadeTime // Shell shock sound loop fade time in seconds
bg_shock_soundLoopSilent
bg_shock_soundModEndDelay // The delay from the end of the shell shock to the end of the sound modification
bg_shock_soundRoomType "generic"
bg_shock_soundSnapshot "default"
bg_shock_soundWetLevel // Shell shock sound wet level
bg_shock_viewKickFadeTime // The time for the shellshock kick effect to fade
bg_shock_viewKickPeriod // The period of the shellshock view kick effect
bg_shock_viewKickRadius // Shell shock kick radius
bg_shock_visionset_inTime // Vision set in transition time (in seconds)
bg_shock_visionset_name
bg_shock_visionset_outTime // Vision set out transition time (in seconds)
bg_slopeFrames // The number of frames to use to determine slope run animations
bg_swingSpeed // The rate at which the player's legs swing around when strafing(multi-player only)
bg_viewBobAmplitudeBase // The base speed-based view bob amplitude
bg_viewBobAmplitudeDtp // The multiplier to apply to the player's speed to get the bob amplitude while diving to prone
bg_viewBobAmplitudeDucked // The multiplier to apply to the player's speed to get the bob amplitude while ducking
bg_viewBobAmplitudeDuckedAds // The multiplier to apply to the player's speed to get the view bob amplitude while ducking ADS
bg_viewBobAmplitudeProne // The multiplier to apply to the player's speed to get the bob amplitude while prone
bg_viewBobAmplitudeRoll // The amplitude applied to the roll for view bobbing
bg_viewBobAmplitudeSprinting // The multiplier to apply to the player's speed to get the bob amplitude while sprinting
bg_viewBobAmplitudeStanding // The multiplier to apply to the player's speed to get the bob amplitude while standing
bg_viewBobAmplitudeStandingAds // The multiplier to apply to the player's speed to get the view bob amplitude while standing and ADS
bg_viewBobAmplitudeSwimming // The multiplier to apply to the player's speed to get the bob amplitude while swimming
bg_viewKickMax // The maximum view kick
bg_viewKickMin // The minimum view kick
bg_viewKickRandom // The random direction scale view kick
bg_viewKickScale // The scale to apply to the damage done to caluclate damage view kick
bg_vsmode_hud // Used to control diferences in vsmode hud.
bg_weaponBobAmplitudeBase // The base speed-based weapon bob amplitude
bg_weaponBobAmplitudeDtp // The multiplier to apply to the player's speed to get the weapon bob amplitude while diving to prone
bg_weaponBobAmplitudeDucked // The multiplier to apply to the player's speed to get the weapon bob amplitude while ducking
bg_weaponBobAmplitudeProne // The multiplier to apply to the player's speed to get the weapon bob amplitude while prone
bg_weaponBobAmplitudeRoll // The amplitude applied to the roll for weapon bobbing
bg_weaponBobAmplitudeSprinting // The multiplier to apply to the player's speed to get the weapon bob amplitude while sprinting
bg_weaponBobAmplitudeStanding // The multiplier to apply to the player's speed to get the weapon bob amplitude while standing
bg_weaponBobAmplitudeSwimming // The multiplier to apply to the player's speed to get the weapon bob amplitude while swimming
bg_weaponBobFrequencySwimming // Controls the speed of the camera bob while swimming
bg_weaponBobHeavyWeaponScalar // Scalar applied to bob angles for heavy weapons (minigun)
bg_weaponBobLag // The lag that will be applied the weapon bob cycle
bg_weaponBobMax // The maximum allowed weapon/viewmodel bob amplitude
bg_weaponleftbone "tag_weapon_left"
bg_weaponrightbone "tag_weapon_right"
bind
blackopsmode // Current game is a blackops game
bodyTypeFromGun // Associate the body type with the primary weapon (perk1 if false)
bot_difficulty // Difficulty level of the basic training bots
bot_enemies // Number of enemies allowed in basic training
bot_friends // Number of friends allowed in basic training
bot_tips // Combat tips enabled in basic training
bulletrange // Defines the how far the bulllets will go.
bullet_penetrationEnabled // Enable/Disable bullet penetration.
bullet_penetrationMinFxDist // Min distance a penetrated bullet must travel before it'll trigger the effects
category // The category number
categoryPlaylist // The playlist index in the category
cg_adsZoomToggleStyle // Style of zoom toggle - 0=oscillate, 1=rotate
cg_adsZScaleMax // The scale factor for shrinky dinks
cg_allPlayerNamesVisible // When true all names are visible within visibility range.
cg_artilleryKillCamBackDist // artillery kill camera: distance of camera backwards from artillery.
cg_artilleryKillCamFov // Artillery kill camera field of view.
cg_artilleryKillCamGroundBackDist // artillery kill camera when stuck to ground: distance of camera backwards from artillery.
cg_artilleryKillCamGroundUpDist // artillery kill camera when stuck to ground: distance of camera vertically from artillery.
cg_artilleryKillCamUpDist // artillery kill camera: distance of camera vertically from artillery.
cg_artilleryKillCamWallOutDist // artillery kill camera when stuck to wall: distance of camera out from wall.
cg_artilleryKillCamWallSideDist // artillery kill camera when stuck to wall: distance of camera along wall from artillery.
cg_blood // Show Blood
cg_brass // Weapons eject brass
cg_bulletlength // The length of a non-tracer round
cg_bulletwidth // The width of the non-tracer round
cg_cameraSpikeEnemyColor // Color of enemies in the camera spike view
cg_cameraSpikeHighlightBrightness // Brightness of player highlights in the camera spike view
cg_cameraVehicleExitTweenTime // Time(secs) to tween from gunner/vehicle camera to normal player camera
cg_cameraWaterClip // Min distance between camera and water surface. To prevent camera seeing water edge-on. Set to -1 to disable
cg_canSeeFriendlyFrustumExpand // The frustum expansion to determine if a friendly is on screen. Positive is inwards.
cg_canSeeFriendlyFrustumMinDistance // If target is inside this distance frustum culling is not applied.
cg_canSeeFriendlyFrustumUpdateInterval // How often the head tag is updated for the overhead names
cg_centertime // The time for a center printed message to fade
cg_chatHeight // The font height of a chat message
cg_chatTime // The amount of time that a chat message is visible
cg_cinematicFullscreen // Draw ingame cinematics full screen
cg_connectionIconSize // Size of the connection icon
cg_constantSizeHeadIcons // Head icons are the same size regardless of distance from the player
cg_corpseHighlightFadeTime // Time (in seconds) that corpse highlights fade out
cg_crosshairAlpha // The alpha value of the crosshair
cg_crosshairAlphaMin // The minimum alpha value of the crosshair when it fades in
cg_crosshairDynamic // Crosshair is Dynamic
cg_crosshairEnemyColor // The crosshair color when over an enemy
cg_cursorHints // Draw cursor hints where:
cg_debugDrawSafeAreas // Show the safe area outlines for the safe areas on the UI
cg_debugevents // Output event debug information
cg_debugInfoCornerOffset // Offset from top-right corner, for cg_drawFPS, etc
cg_debugposition // Output position debugging information
cg_debug_overlay_viewport // Remove the sniper overlay so you can check that the scissor window is correct.
cg_debug_triggers // Debug client side Triggers, prints out all the client triggers the first time they are hit.
cg_descriptiveText // Draw descriptive spectator messages
cg_destructibleKillCamCloseXYDist // Destructible kill camera closest distance in front of the bomb.
cg_destructibleKillCamCloseZDist // Destructible kill camera closest distance above the target.
cg_destructibleKillCamFarBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_destructibleKillCamFarBlurDist // Destructible kill camera distance above the airplane.
cg_destructibleKillCamFarBlurStart // Destructible kill camera distance above the airplane.
cg_destructibleKillCamFov // Destructible kill camera field of view.
cg_destructibleKillCamNearBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_destructibleKillCamNearBlurEnd // Destructible kill camera distance above the airplane.
cg_destructibleKillCamNearBlurStart // Destructible kill camera distance above the airplane.
cg_destructibleKillCamRegularHeight // If a destructible is above this height, then just move the camera to above it
cg_destructibleKillCamZIncrease // Height above origin for the destructibles
cg_development // Indicates if we are in DEVELOPMENT (non-release ship builds)
cg_dogKillCamDistFromEyes // Dog kill camera: distance of camera past the delta from player target to dog eye
cg_dogKillCamForwardDist // Dog kill camera: distance of target camera vertically from dog.
cg_dogKillCamFov // Dog kill camera field of view.
cg_dogKillCamSideDist // Dog kill camera: distance of camera target vertically from dog.
cg_dogKillCamUpDist // Dog kill camera: distance of camera target vertically from dog.
cg_dogKillMinDistFromTarget // Dog kill camera: minimum distance that the camera will approach the target
cg_draw2D // Draw 2D screen elements
cg_drawBreathHint // Draw a 'hold breath to steady' hint
cg_drawCrosshair // Turn on weapon crosshair
cg_drawCrosshair3D // Turn on weapon crosshair in 3D mode.
cg_drawCrosshairNames // Draw the name of an enemy under the crosshair
cg_drawCrosshairNamesPosX // Virtual screen space position of the crosshair name
cg_drawCrosshairNamesPosY // Virtual screen space position of the crosshair name
cg_drawErrorMessages // Draw error/warning text
cg_drawFPS // Draw frames per second
cg_drawFPSLabels // Draw FPS Info Labels
cg_drawFPSOnly // Draw only the FPS stats in the upper right
cg_drawFPSScale // Draw FPS size scale
cg_drawFriendlyNames // Whether to show friendly names in game
cg_drawGun // Draw the view model
cg_drawHealth // Draw health bar
cg_drawHoldBreathHint // Turn on hold breath hint string for the sniper rifles
cg_drawMantleHint // Draw a 'press key to mantle' hint
cg_drawMaterial // Draw debugging information for materials
cg_drawModelAxis // Draw debugging axis for a bone of the model under the crosshair
cg_drawpaused // Draw paused screen
cg_drawScriptUsage // Draw debugging information for scripts
cg_drawShellshock // Draw shellshock & flashbang screen effects.
cg_drawSnapshot // Draw debugging information for snapshots
cg_drawSnapshotTime // Draw length of snapshot buffer
cg_drawTalk // Controls which icons CG_TALKER ownerdraw draws
cg_drawThroughWalls // Whether to draw friendly names through walls or not
cg_drawTurretCrosshair // Draw a cross hair when using a turret
cg_drawVersion // Draw the game version
cg_drawVersionX // X offset for the version string
cg_drawVersionY // Y offset for the version string
cg_dumpAnims // Output animation info for the given entity id
cg_enemyNameFadeIn // Time in milliseconds to fade in enemy names
cg_enemyNameFadeOut // Time in milliseconds to fade out enemy names
cg_errordecay // Decay for predicted error
cg_explosiveKillCamBackDist // Explosive kill camera: distance of camera backwards from explosive.
cg_explosiveKillCamGroundBackDist // Explosive kill camera when stuck to ground: distance of camera backwards from explosive.
cg_explosiveKillCamGroundUpDist // Explosive kill camera when stuck to ground: distance of camera vertically from explosive.
cg_explosiveKillCamStopDecelDist // Rocket and Grenade Launcher kill camera: distance over which to decelerate when coming to rest
cg_explosiveKillCamStopDist // Rocket and Grenade Launcher kill camera: distance from player to begin coming to rest
cg_explosiveKillCamUpDist // Explosive kill camera: distance of camera vertically from explosive.
cg_explosiveKillCamWallOutDist // Explosive kill camera when stuck to wall: distance of camera out from wall.
cg_explosiveKillCamWallSideDist // Explosive kill camera when stuck to wall: distance of camera along wall from explosive.
cg_fakefireWizbyChance // The probability that a fake fire shot plays a wizby to local players round
cg_firstPersonTracerChance // The probability that a bullet is a tracer round for your bullets
cg_flareVisionSetFadeDuration // Duration of fade back to normal vision set when you look away from the flare
cg_footprints // Draw footprint decals and effects
cg_footprintsDebug // Debug footprint drawing code (0 means no debugging)
cg_footprintsDistortWater // Distort water on footprint (0 means no distortion)
cg_footsteps // Play footstep sounds
cg_fov // The field of view angle in degrees
cg_fovExtraCam // The field of view angle in degrees for the extra cam
cg_fovMin // The minimum possible field of view
cg_fovScale // Scale applied to the field of view
cg_fov_default // User default field of view angle in degrees
cg_fov_default_thirdperson // User default 3rd person field of view angle in degrees
cg_friendlyNameFadeIn // Time in milliseconds to fade in friendly names
cg_friendlyNameFadeOut // Time in milliseconds to fade out friendly names
cg_fuelHudVersion // Determines what version of the hud to show
cg_fullscreenFinalKillcam // Fullscreen final killcam
cg_gameBoldMessageWidth // The maximum character width of the bold game messages
cg_gameMessageWidth // The maximum character width of the game messages
cg_gun_move_f // Weapon movement forward due to player movement
cg_gun_move_minspeed // The minimum weapon movement rate
cg_gun_move_r // Weapon movement right due to player movement
cg_gun_move_rate // The base weapon movement rate
cg_gun_move_u // Weapon movement up due to player movement
cg_gun_ofs_f // Forward weapon offset when prone/ducked
cg_gun_ofs_r // Right weapon offset when prone/ducked
cg_gun_ofs_u // Up weapon offset when prone/ducked
cg_gun_x // x position of the viewmodel
cg_gun_y // y position of the viewmodel
cg_gun_z // z position of the viewmodel
cg_headIconMinScreenRadius // The minumum radius of a head icon on the screen
cg_heliKillCamFarBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_heliKillCamFarBlurDist // Helicopter kill camera distance above the helicopter.
cg_heliKillCamFarBlurStart // Helicopter kill camera distance above the helicopter.
cg_heliKillCamFov // Helicopter kill camera field of view.
cg_heliKillCamNearBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_heliKillCamNearBlurEnd // Helicopter kill camera distance above the helicopter.
cg_heliKillCamNearBlurStart // Helicopter kill camera distance above the helicopter.
cg_hintFadeTime // Time in milliseconds for the cursor hint to fade
cg_hudChatIntermissionPosition // Position of the HUD chat box during intermission
cg_hudChatPosition // Position of the HUD chat box
cg_hudDamageDirectionalIconTime // The amount of time for the damage icon to stay on screen after damage is taken
cg_hudDamageIconHeight // The height of the damage icon
cg_hudDamageIconInScope // Draw damage icons when aiming down the sight of a scoped weapon
cg_hudDamageIconOffset // The offset from the center of the damage icon
cg_hudDamageIconTime // The amount of time for the damage icon to stay on screen after damage is taken
cg_hudDamageIconWidth // The width of the damage icon
cg_hudGrenadeIconEnabledFlash // Show the grenade indicator for flash grenades
cg_hudGrenadeIconHeight // The height of the grenade indicator icon
cg_hudGrenadeIconInScope // Show the grenade indicator when aiming down the sight of a scoped weapon
cg_hudGrenadeIconMaxHeight // The minimum height difference between a player and a grenade for the grenade to be shown on the grenade indicator
cg_hudGrenadeIconMaxRangeFlash // The minimum distance that a flashbang has to be from a player in order to be shown on the grenade indicator
cg_hudGrenadeIconMaxRangeFrag // The minimum distance that a grenade has to be from a player in order to be shown on the grenade indicator
cg_hudGrenadeIconOffset // The offset from the center of the screen for a grenade icon
cg_hudGrenadeIconWidth // The width of the grenade indicator icon
cg_hudGrenadeIndicatorFadeUp // Draw grenade indicator with distance fade(COD3 style)
cg_hudGrenadeIndicatorStartColor
cg_hudGrenadeIndicatorTargetColor
cg_hudGrenadePointerHeight // The height of the grenade indicator pointer
cg_hudGrenadePointerPivot // The pivot point of th grenade indicator pointer
cg_hudGrenadePointerPulseFreq // The number of times per second that the grenade indicator flashes in Hertz
cg_hudGrenadePointerPulseMax // The maximum alpha of the grenade indicator pulse. Values higher than 1 will cause the indicator to remain at full brightness for longer
cg_hudGrenadePointerPulseMin // The minimum alpha of the grenade indicator pulse. Values lower than 0 will cause the indicator to remain at full transparency for longer
cg_hudGrenadePointerWidth // The width of the grenade indicator pointer
cg_hudLegacySplitscreenScale // Screen scale for hud elements in splitscreen
cg_hudLegacyStereo3DScale // Screen scale for hud elements in stereo 3D
cg_hudMapBorderWidth // The size of the full map's border, filled by the CG_PLAYER_FULLMAP_BORDER ownerdraw
cg_hudMapFriendlyHeight // The size of the friendly icon on the full map
cg_hudMapFriendlyWidth // The size of the friendly icon on the full map
cg_hudMapPlayerHeight // The size of the player's icon on the full map
cg_hudMapPlayerWidth // The size of the player's icon on the full map
cg_hudMapRadarLineThickness // Thickness, relative to the map width, of the radar texture that sweeps across the full screen map
cg_hudObjectiveTextScale "0.3"
cg_hudProneY // Virtual screen y coordinate of the prone blocked message
cg_hudSayPosition // Position of the HUD say box
cg_hudSplitscreenBannerScoreboardScale // Scale value to apply to the splitscreen banner scoreboard
cg_hudSplitscreenCompassElementScale // Scale value to apply to compass elements in splitscreen
cg_hudSplitscreenCompassScale // Scale value to apply to the compass in splitscreen
cg_hudSplitscreenOffsetsUseScale // Use splitscreen scaling for element offsets
cg_hudSplitscreenScoreboardScale // Scale value to apply to the scoreboard in splitscreen
cg_hudSplitscreenStanceScale // Scale value to apply to the stance HUD element in splitscreen
cg_hudStanceFlash // The background color of the flash when the stance changes
cg_hudStanceHintPrints // Draw helpful text to say how to change stances
cg_hudVotePosition // Position of the HUD vote box
cg_infraredBlurTime // Time [in millisecs] that the infrared blur lasts.
cg_infraredHighlightOffset // Offset to the player highlight when using infrared scope
cg_infraredHighlightScale // Scale of the player highlight when using infrared scope
cg_invalidCmdHintBlinkInterval // Blink rate of an invalid command hint
cg_invalidCmdHintDuration // Duration of an invalid command hint
cg_laserEndOffset // How far from the point of collision the end of the beam is.
cg_laserFlarePct // Percentage laser widens over distance from viewer.
cg_laserForceOn // Force laser sights on in all possible places (for debug purposes).
cg_laserLight // Whether to draw the light emitted from a laser (not the laser itself)
cg_laserLightBeginOffset // How far from the true beginning of the beam the light at the beginning is.
cg_laserLightBodyTweak // Amount to add to length of beam for light when laser hits a body (for hitboxes).
cg_laserLightEndOffset // How far from the true end of the beam the light at the end is.
cg_laserLightRadius // The radius of the light at the far end of a laser beam
cg_laserRadius // The size (radius) of a laser beam
cg_laserRange // The maximum range of a laser beam
cg_laserRangePlayer // The maximum range of the player's laser beam
cg_lastSpectatorSelectedThirdPerson // Saves last spectator view selected
cg_mapLocationSelectionCursorSpeed // Speed of the cursor when selecting a location on the map
cg_mapLocationSelectionRotationSpeed // Rotation speed of the cursor when selecting a location on the map
cg_marks_ents_player_only // Marks on entities from players' bullets only.
cg_mature // Show Mature Content
cg_MaxDownedPulseRate // The amount of alpha to fade per second, at most for downed allies
cg_MinDownedPulseRate // The amount of alpha to fade per second, at minimum for downed allies
cg_motionblur_duration // Sets radial motion blur duration
cg_motionblur_fadeout // Sets fade time for radial motion blur
cg_nopredict // Don't do client side prediction
cg_overheadIconSize // The maximum size to show overhead icons like 'rank'
cg_overheadNamesFarDist // The far distance at which name sizes are scaled by cg_overheadNamesFarScale
cg_overheadNamesFarScale // The amount to scale overhead name sizes at cg_overheadNamesFarDist
cg_overheadNamesFont // Font for overhead names ( see menudefinition.h )
cg_overheadNamesGlow // Glow color for overhead names
cg_overheadNamesMaxDist // The maximum distance for showing friendly player names
cg_overheadNamesNearDist // The near distance at which names are full size
cg_overheadNamesSize // The maximum size to show overhead names
cg_overheadNamesTagUpdateInterval // How often the friendly visibility head tag is updated for the on screen frustum check
cg_overheadRankSize // The size to show rank text
cg_playerFrustumHalfHeight // The radius used to calculate frustum target center for a player. Used for fast "is on screen" tests
cg_playerHighlightBlinkTime // The speed (in ms) at which the player highlights blink.
cg_playerHighlightBrightness // Brightness of highlights.
cg_playerHighlightEnemyColor // Color of enemy player highlights.
cg_playerHighlightMinFade // The minimum fade for player highlight blinking.
cg_playerHighlightTargetSize // Size of player target highlights.
cg_predictItems // Turn on client side prediction for item pickup
cg_proneFeetCollisionHull // Enables the use of the extra physics collision hulls on the feet while prone.
cg_readTitleStorageLocally // Read title storage locally, instead of from the Xbox Live server
cg_retrieveHintTime // Time in milliseconds between the landing of a retrievable object and the start of the pulse shader to hint that the object is retrievable
cg_retrieveHintTimeStuck // Time in milliseconds between the retrievable object being stuck in an entity and the start of the pulse shader to hint that the object is retrievable
cg_rocketKillCamBackDist // Rocket kill camera: distance of camera backwards from rocket.
cg_rocketKillCamUpDist // Rocket kill camera: distance of camera vertically from rocket.
cg_scoreboardBannerHeight // Banner height of the scoreboard
cg_scoreboardFont // Scoreboard font enum ( see menudefinition.h )
cg_scoreboardHeaderFontScale // Scoreboard header font scale
cg_scoreboardHeight // Height of the scoreboard
cg_scoreboardItemHeight // Item height of each item
cg_scoreboardMyColor // The local player's font color when shown in scoreboard
cg_scoreboardPingGraph // Whether to show graphical ping
cg_scoreboardPingHeight // Height of the ping graph as a % of the scoreboard row height
cg_scoreboardPingText // Whether to show numeric ping value
cg_scoreboardPingWidth // Width of the ping graph as a % of the scoreboard
cg_scoreboardQuarterscreenWidth // Width of the scoreboard for a quarter of the screen splitscreen
cg_scoreboardRankFontScale // Scale of rank font
cg_scoreboardScrollStep // Scroll step amount for the scoreboard
cg_scoreboardSplitscreenWidth // Width of the scoreboard in splitscreen
cg_scoreboardTextOffset // Scoreboard text offset
cg_scoreboardWidth // Width of the scoreboard
cg_ScoresPing_BgColor // Background color of ping
cg_ScoresPing_HighColor // Color for high ping
cg_ScoresPing_Interval // Number of milliseconds each bar represents
cg_ScoresPing_LowColor // Color for low ping
cg_ScoresPing_MaxBars // Number of bars to show in ping graph
cg_ScoresPing_MedColor // Color for medium ping
cg_scriptedKillCamCloseXYDist // Scripted kill camera closest distance in front of the bomb.
cg_scriptedKillCamCloseZDist // Scripted kill camera closest distance above the target.
cg_scriptedKillCamFarBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_scriptedKillCamFarBlurDist // Scripted kill camera distance above the airplane.
cg_scriptedKillCamFarBlurStart // Scripted kill camera distance above the airplane.
cg_scriptedKillCamFov // Scripted kill camera field of view.
cg_scriptedKillCamNearBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_scriptedKillCamNearBlurEnd // Scripted kill camera distance above the airplane.
cg_scriptedKillCamNearBlurStart // Scripted kill camera distance above the airplane.
cg_scriptIconSize // Size of Icons defined by script
cg_seatHintFadeTime // Time in milliseconds for the seat hint to fade
cg_showmiss // Show prediction errors
cg_showZombieControls // Show the zombie controller layout
cg_showZombieMap // Show the zombie map up
cg_spectateThirdPerson // Default player to thirdperson in spectate
cg_splitscreenLetterboxSize // Amount of border to leave at the side edges of the screen in 2 & 3 was split screen.
cg_splitscreenSpectatorScaleIncrease // Scale value to apply to the spectator message in splitscreen
cg_sprintMeterDisabledColor // The color of the sprint meter when the sprint meter is disabled
cg_sprintMeterEmptyColor // The color of the sprint meter when the sprint meter is empty
cg_sprintMeterFullColor // The color of the sprint meter when the sprint meter is full
cg_subtitleMinTime // The minimum time that the subtitles are displayed on screen in seconds
cg_subtitles // Show subtitles
cg_subtitleWidthStandard // The width of the subtitles on a non wide-screen
cg_subtitleWidthWidescreen // The width of the subtitle on a wide-screen
cg_teamChatsOnly // Allow chatting only on the same team
cg_thirdPerson // Use third person view
cg_thirdPersonAngle // The angle of the camera from the player in third person view
cg_thirdPersonFocusDist // The distance infront of the player to aim the 3rd person camera at
cg_thirdPersonMode // How the camera behaves in third person
cg_thirdPersonRange // The range of the camera from the player in third person view
cg_timedDamageDuration // Sets the time to display a damage friendly indicator
cg_tracerchance // The probability that a bullet is a tracer round
cg_tracerlength // The length of a tracer round
cg_tracerNoDrawTime // Delay in milliseconds before a tracer will start rendering
cg_tracerScale // Scale the tracer at a distance, so it's still visible
cg_tracerScaleDistRange // The range at which a tracer is scaled to its maximum amount
cg_tracerScaleMinDist // The minimum distance to scale a tracer
cg_tracerScrewDist // The length a tracer goes as it completes a full corkscrew revolution
cg_tracerScrewRadius // The radius of a tracer's corkscrew motion
cg_tracerSpeed // The speed of a tracer round in units per second
cg_tracerwidth // The width of the tracer round
cg_treadmarks // Draw treadmark decals and effects
cg_turretBipodOffset // Offset bipod mount position on gun by this distance
cg_turretKillCamBackOffset // Move the camera to the Back of the turret by this much.
cg_turretKillCamCloseXYDist // Airstrike kill camera closest distance in front of the bomb.
cg_turretKillCamCloseZDist // Airstrike kill camera closest distance above the target.
cg_turretKillCamDistanceIncrease // Airstrike kill camera distance above the airplane.
cg_turretKillCamFarBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_turretKillCamFarBlurDist // Airstrike kill camera distance above the airplane.
cg_turretKillCamFarBlurStart // Airstrike kill camera distance above the airplane.
cg_turretKillCamFov // Airstrike kill camera field of view.
cg_turretKillCamHeightIncrease // Airstrike kill camera distance above the airplane.
cg_turretKillCamNearBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
cg_turretKillCamNearBlurEnd // Airstrike kill camera distance above the airplane.
cg_turretKillCamNearBlurStart // Airstrike kill camera distance above the airplane.
cg_turretKillCamSideOffset // Move the camera to the side of the turret by this much.
cg_ufo_scaler // The speed at which ufo camera moves
cg_use_colored_smoke // Allow the use of colored smoke grenades
cg_usingClientScripts // True, if client scripts are enabled.
cg_viewVehicleInfluenceGunner // The influence on the view from being a vehicle gunner
cg_viewVehicleInfluenceGunnerFiring // The influence on the view from being a vehicle gunner while firing
cg_viewZSmoothingMax // Threshhold for the maximum smoothing distance we'll do
cg_viewZSmoothingMin // Threshhold for the minimum smoothing distance it must move to smooth
cg_viewZSmoothingTime // Amount of time to spread the smoothing over
cg_visionSetLerpMaxDecreasePerFrame // Maximum jump of customlerp between 2 frames, used for smoothing for flare visionset
cg_visionSetLerpMaxIncreasePerFrame // Maximum jump of customlerp between 2 frames, used for smoothing for flare visionset
cg_voiceIconSize // Size of the 'voice' icon
cg_watersheeting // Enables/disables the watersheeting fullscreen effect
cg_waterTrailRippleFrequency // How often (in ms) will play the waist ripple fx for actors in water
cg_waterTrailRippleVariance // How late (in ms) the waist ripple fx can be played
cg_weaponCycleDelay // The delay after cycling to a new weapon to prevent holding down the cycle weapon button from cycling too fast
cg_weaponHintsCoD1Style // Draw weapon hints in CoD1 style: with the weapon name, and with the icon below
cg_youInKillCamSize // Size of the 'you' Icon in the kill cam
challengeResponseResendBackoffInterval // Used for testing challenge/response bool requests
challengeResponseResendInterval // Used for testing challenge/response bool requests
clancard_clanid "0"
clanMessageLastFetchTime // Time in milliseconds of the last clan message file fetch operation
clanName
cl_analog_attack_threshold // The threshold before firing
cl_anglespeedkey // Multiplier for max angle speed for game pad and keyboard
cl_avidemo // AVI demo frames per second
cl_bypassMouseInput // Bypass UI mouse input and send directly to the game
cl_connectionAttempts // Maximum number of connection attempts before aborting
cl_connectTimeout // Timeout time in seconds while connecting to a server
cl_dblTapMaxDelayTime // The maximum amount of time (ms) between button presses to be considered a double tap
cl_dblTapMaxHoldTime // The maximum amount of time (ms) the player can hold the button to be considered a double tap
cl_deathMessageWidth // Pixel width of the obituary area
cl_dtpHoldTime // The time to hold the stance button while sprinting before the player dives to prone
cl_forceavidemo // Record AVI demo even if client is not active
cl_freelook // Enable looking with mouse
cl_freezeDemo // cl_freezeDemo is used to lock a demo in place for single frame advances
cl_hudDrawsBehindUI // Should the HUD draw when the UI is up?
cl_ingame // True if the game is active
cl_inputTimeScaleFrac // Set how much of the time scale to use in the view angles turn rate
cl_maxpackets // Maximum number of packets sent per frame
cl_maxPing // Maximum ping for the client
cl_maxppf // Maximum servers to ping per frame in server browser
cl_motdString
cl_mouseAccel // Mouse acceleration
cl_network_warning // Alternative enable SCR_DrawPleaseWait dialog
cl_nodelta // The server does not send snapshot deltas
cl_noprint // Print nothing to the console
cl_packetdup // Enable packet duplication
cl_paused // Pause the game
cl_pitchspeed // Max pitch speed in degrees for game pad
cl_serverStatusResendTime // Time in milliseconds to resend a server status message
cl_showmouserate // Print mouse rate debugging information to the console
cl_shownet // Display network debugging information
cl_shownuments // Show the number of entities
cl_showSend // Enable debugging information for sent commands
cl_showServerCommands // Enable debugging information for server commands
cl_showTimeDelta // Enable debugging information for time delta
cl_stanceHoldTime // The time to hold the stance button before the player goes prone
cl_timeout // Seconds with no received packets until a timeout occurs
cl_wadefps // Toggles the display of the conspicuous FPS meter in non-development builds only.
cl_yawspeed // Max yaw speed in degrees for game pad and keyboard
codMessageLastFetchTime // Time in milliseconds of the last cod message file fetch operation
collectors // Set to true if the player has the collector's edition
compass // Display Compass
compassClampIcons // If true, friendlies and enemy pings clamp to the edge of the radar. If false, they disappear off the edge.
compassCoords // x = North-South coord base value,
compassECoordCutoff // Left cutoff for the scrolling east-west coords
compassEnemyFootstepEnabled // Enables enemies showing on the compass because of moving rapidly nearby.
compassEnemyFootstepMaxRange // The maximum distance at which an enemy may appear on the compass due to 'footsteps'
compassEnemyFootstepMaxZ // The maximum vertical distance enemy may be from the player and appear on the compass due to 'footsteps'
compassEnemyFootstepMinSpeed // The minimum speed an enemy must be moving to appear on the compass due to 'footsteps'
compassForcePlayerIcon // Forces the player to always show as compassping_player on the compass.
compassFriendlyHeight // The size of the friendly icon on the compass
compassFriendlyWidth // The size of the friendly icon on the compass
compassGridAlign // Position of letter and number in grid.
compassGridCols // Grid column count.
compassGridEnabled // Enables compass grid.
compassGridRows // Grid row count.
compassLocalRadarRadius // Maximum radius of the local radar
compassLocalRadarUpdateTime // Time between local radar updates
compassMaxRange // The maximum range from the player in world space that objects will be shown on the compass
compassMinRadius // The minimum radius from the center of the compass that objects will appear.
compassMinRange // The minimum range from the player in world space that objects will appear on the compass
compassObjectiveArrowHeight // The size of the objective arrow on the compass
compassObjectiveArrowOffset // The offset of the objective arrow inward from the edge of the compass map
compassObjectiveArrowRotateDist // Distance from the corner of the compass map at which the objective arrow rotates to 45 degrees
compassObjectiveArrowWidth // The size of the objective arrow on the compass
compassObjectiveDetailDist // When an objective is closer than this distance (in meters), the icon will not be drawn on the tickertape.
compassObjectiveDrawLines // Draw horizontal and vertical lines to the active target, if it is within the minimap boundries
compassObjectiveHeight // The size of the objective on the compass
compassObjectiveIconHeight // The size of the objective on the full map
compassObjectiveIconHeightZombie // The size of the objective on the full map
compassObjectiveIconWidth // The size of the objective on the full map
compassObjectiveIconWidthZombie // The size of the objective on the full map
compassObjectiveMaxHeight // The maximum height that an objective is considered to be on this level
compassObjectiveMaxRange // The maximum range at which an objective is visible on the compass
compassObjectiveMinAlpha // The minimum alpha for an objective at the edge of the compass
compassObjectiveMinDistRange // The distance that objective transition effects play over, centered on compassObjectiveNearbyDist.
compassObjectiveMinHeight // The minimum height that an objective is considered to be on this level
compassObjectiveNearbyDist // When an objective is closer than this distance (in meters), an "Objective Nearby" type of indicator is shown.
compassObjectiveNumRings // The number of rings when a new objective appears
compassObjectiveRingSize // The maximum objective ring sige when a new objective appears on the compass
compassObjectiveRingTime // The amount of time between each ring when an objective appears
compassObjectiveTextHeight // Objective text height
compassObjectiveTextScale // Scale to apply to hud objectives
compassObjectiveWidth // The size of the objective on the compass
compassPartialType // The style of compass to use 2d or 3d
compassPlayerHeight // The size of the player's icon on the compass
compassPlayerWidth // The size of the player's icon on the compass
compassRadarLineThickness // Thickness, relative to the compass size, of the radar texture that sweeps across the map
compassRadarPingFadeTime // How long an enemy is visible on the compass after it is detected by radar
compassRadarUpdateFastTime // Time between radar updates for fast update killstreak
compassRadarUpdateTime // Time between radar updates
compassRotation // Style of compass
compassSatellitePingFadeTime // How long an enemy is visible on the compass after it is detected by Satellite
compassSatelliteScanTime // Time taken for Satellite t scans
compassSatelliteStaticImageFadeTime // How long the static image is visible on the compass after it is detected by Satellite
compassScaleDiff // Difference from original compass max range in world space.
compassScaleDuration // The amount of time to take scaling the compass map.
compassScaleReset // Whether to reset compassMaxRange to its default value.
compassScaleTimer // Time scaling started.
compassShowEnemies // Enables enemies showing on the compass.
compassSize // Scale the compass
compassSoundPingFadeTime // The time in seconds for the sound overlay on the compass to fade
compassSpectatorsSeeEnemies // Spectators always see enemies on the map.
compassStaticImageUpdateTime // Time between static image updates
compassTickertapeStretch // How far the tickertape should stretch from its center.
com_animCheck // Check anim tree
com_attractmode // Run attract mode
com_attractmodeduration // Time when controller is unused before attract mode is enabled
com_desiredMenu // Target menu to navigate to when possible
com_errorMessage
com_filter_output // Use console filters for filtering output.
com_first_time // non zero if the profile has never run the game before (only accurate after the iis)
com_freemoveScale // Scale how fast you move in com_freemove mode
com_introPlayed // Intro movie has been played
com_isNotice "0"
com_maxclients // Maximum amount of clients on the server
com_maxfps // Cap frames per second
com_maxFrameTime // Time slows down if a frame takes longer than this many milliseconds
com_movieIsPlaying // Is a movie playiner.
com_startupIntroPlayed // Game startup intro movie(s) has been played
com_statmon // Draw stats monitor
com_timescale // Scale time of each frame
com_useConfig // Use configuration files
com_voip_bandwidth_restricted // Use VOIP inhibitor during high bandwidth usage
com_voip_disable_threshold // Message size at which voip becomes disabled
com_voip_resume_time // Time at which voip can resume
consoleGame "true"
consoleStatAction // The action to take if console stat fails
consoleStatCheck // The console stat check to preform. off, console id check, external ip, internal ip
con_default_console_filter "*"
con_errormessagetime // Onscreen time for error messages in seconds
con_gameMsgWindow0FadeInTime // Time to fade in new messages in game message window 0
con_gameMsgWindow0FadeOutTime // Time to fade out old messages in game message window 0
con_gameMsgWindow0Filter "gamenotify obituary"
con_gameMsgWindow0LineCount // Maximum number of lines of text visible at once in game message window 0
con_gameMsgWindow0MsgTime // On screen time for game messages in seconds in game message window 0
con_gameMsgWindow0ScrollTime // Time to scroll messages when the oldest message is removed in game message window 0
con_gameMsgWindow0SplitscreenScale // Scaling of game message window 0 in splitscreen
con_gameMsgWindow1FadeInTime // Time to fade in new messages in game message window 1
con_gameMsgWindow1FadeOutTime // Time to fade out old messages in game message window 1
con_gameMsgWindow1Filter "boldgame"
con_gameMsgWindow1LineCount // Maximum number of lines of text visible at once in game message window 1
con_gameMsgWindow1MsgTime // On screen time for game messages in seconds in game message window 1
con_gameMsgWindow1ScrollTime // Time to scroll messages when the oldest message is removed in game message window 1
con_gameMsgWindow1SplitscreenScale // Scaling of game message window 1 in splitscreen
con_gameMsgWindow2FadeInTime // Time to fade in new messages in game message window 2
con_gameMsgWindow2FadeOutTime // Time to fade out old messages in game message window 2
con_gameMsgWindow2Filter "subtitle"
con_gameMsgWindow2LineCount // Maximum number of lines of text visible at once in game message window 2
con_gameMsgWindow2MsgTime // On screen time for game messages in seconds in game message window 2
con_gameMsgWindow2ScrollTime // Time to scroll messages when the oldest message is removed in game message window 2
con_gameMsgWindow2SplitscreenScale // Scaling of game message window 2 in splitscreen
con_inputBoxColor // Color of the console input box
con_inputHintBoxColor // Color of the console input hint box
con_matchPrefixOnly // Only match the prefix when listing matching Dvars
con_minicon // Display the mini console on screen
con_miniconlines // Number of lines in the minicon message window
con_MiniConSplitscreenScale // Splitscreen scale value for the mini console
con_minicontime // Onscreen time for minicon messages in seconds
con_outputBarColor // Color of the console output slider bar
con_outputSliderColor // Color of the console slider
con_outputWindowColor // Color of the console output
con_typewriterColorBase // Base color of typewritten objective text.
con_typewriterColorGlowCheckpoint // Color of typewritten objective text.
con_typewriterColorGlowCompleted // Color of typewritten objective text.
con_typewriterColorGlowFailed // Color of typewritten objective text.
con_typewriterColorGlowUpdated // Color of typewritten objective text.
con_typewriterDecayDuration // Time (in milliseconds) to spend disolving the line away.
con_typewriterDecayStartTime // Time (in milliseconds) to spend between the build and disolve phases.
con_typewriterEnabledSounds // Enable the typewriter sounds and text effects. Disabled still uses the typewrite glow settings.
con_typewriterPrintSpeed // Time (in milliseconds) to print each letter in the line.
counterDownloadInterval // Number of minutes before all the global counters are downloaded
counterUploadInterval // Number of minutes before all the global counters are uploaded
customclass1 "CUSTOM 1"
customclass2 "CUSTOM 2"
customclass3 "CUSTOM 3"
customclass4 "CUSTOM 4"
customclass5 "CUSTOM 5"
customGameMode // 0 for no custom game mode, 1 if built in, 2 if user created custom game mode.
custom_class_create_enabled // custom class dvar
custom_class_damage // custom class dvar
custom_class_explosive_damage // custom class dvar
custom_class_health // custom class dvar
custom_class_health_regen // custom class dvar
custom_class_health_vampirism // custom class dvar
custom_class_mode // Set to 1 if you want to use custom classes
custom_class_speed // custom class dvar
custom_class_sprint_speed // custom class dvar
custom_class_team // custom class dvar
custom_custom_class_mode "0"
custom_custom_killstreak_1 "0"
custom_custom_killstreak_1_kills "0"
custom_custom_killstreak_2 "0"
custom_custom_killstreak_2_kills "0"
custom_custom_killstreak_3 "0"
custom_custom_killstreak_3_kills "0"
custom_custom_killstreak_mode "0"
custom_custom_perks_allow_pro "0"
custom_killstreak_1 "0"
custom_killstreak_1_kills "0"
custom_killstreak_2 "0"
custom_killstreak_2_kills "0"
custom_killstreak_3 "0"
custom_killstreak_3_kills "0"
custom_killstreak_mode // Set to 1 for no killstreaks and 2 for custom
custom_killstreak_numkills // used to communicate killstreak num from feeders
custom_koth_autodestroytime "1000"
custom_koth_kothmode "0"
custom_koth_spawntime "45"
custom_numlives "0"
custom_perks_allow_pro "0"
custom_perk_armorpiercing "40"
custom_perk_bulletpenetrationmultiplier "2"
custom_perk_damagekickreduction "0.2"
custom_perk_delayexplosivetime "0.2"
custom_perk_disarmexplosivetime "2"
custom_perk_extrabreath "5"
custom_perk_fallheightunits
custom_perk_fireproof "95"
custom_perk_flakJacket "35"
custom_perk_healthregenmultiplier "1.5"
custom_perk_interactspeedmultiplier "1.15"
custom_perk_killstreakreduction "1"
custom_perk_mantlereduction "0.5"
custom_perk_shellshockreduction "0.5"
custom_perk_speedmultiplier "1.07"
custom_perk_sprintmultiplier "2"
custom_perk_sprintrecoverymultiplier "0.6"
custom_perk_weapadsmultiplier "0.5"
custom_perk_weapmeleemultiplier "0.5"
custom_perk_weapratemultiplier "0.75"
custom_perk_weapreloadmultiplier "0.5"
custom_perk_weapspreadmultiplier "0.65"
custom_perk_weapswitchmultiplier "0.5"
custom_playerrespawndelay "0"
custom_player_laststandbleedouttime "30"
custom_player_laststandbleedouttimenorevive "100"
custom_revive_time_taken "1.15"
custom_roundlimit "1"
custom_scorelimit "30000"
custom_scr_allowannouncer "1"
custom_scr_allowbattlechatter "1"
custom_scr_bot_difficulty
custom_scr_ctf_enemycarriervisible "0"
custom_scr_ctf_idleflagreturntime "30"
custom_scr_ctf_roundswitch "1"
custom_scr_ctf_touchreturn "1"
custom_scr_custom_score_assist "-1"
custom_scr_dem_bombtimer "45"
custom_scr_dem_defusetime "5"
custom_scr_dem_extratime "3"
custom_scr_dem_planttime "5"
custom_scr_dem_roundswitch "1"
custom_scr_dm_bonus_leader "0"
custom_scr_dm_score_assist "0"
custom_scr_dm_score_death "0"
custom_scr_dm_score_headshot "0"
custom_scr_dm_score_kill "50"
custom_scr_dm_score_suicide "0"
custom_scr_dom_flagcapturetime "100"
custom_scr_game_allowkillcam "1"
custom_scr_game_forceradar "0"
custom_scr_game_hardpoints "1"
custom_scr_game_onlyheadshots "0"
custom_scr_game_perks "1"
custom_scr_game_spectatetype "1"
custom_scr_hardcore "0"
custom_scr_num_bots
custom_scr_num_bots_enemy
custom_scr_num_bots_friendly
custom_scr_player_forcerespawn "1"
custom_scr_player_healthregentime "5"
custom_scr_player_maxhealth "10000"
custom_scr_player_sprintTime "10000"
custom_scr_rcbomb_notimeout "0"
custom_scr_sab_bombtimer "30"
custom_scr_sab_defusetime "5"
custom_scr_sab_hotpotato "0"
custom_scr_sab_planttime "2.5"
custom_scr_sab_roundswitch "1"
custom_scr_sd_bombtimer "45"
custom_scr_sd_defusetime "5"
custom_scr_sd_multibomb "0"
custom_scr_sd_planttime "5"
custom_scr_sd_roundswitch "3"
custom_scr_tdm_bonus_leader "0"
custom_scr_tdm_score_death "0"
custom_scr_tdm_score_headshot "0"
custom_scr_tdm_score_kill "10000"
custom_scr_tdm_score_suicide "0"
custom_scr_team_fftype "0"
custom_scr_team_teamkillspawndelay "20"
custom_scr_vehicles_enabled "1"
custom_timelimit "0"
custom_waverespawndelay "0"
dcacheSimulateNoHDD // When turned on, simulated no HDD for caching.
ddl_verbose // Verbose DDL output.
DebugFireManager // Display fire manager cell information.
debugRenderBrushes // Render brushes
debugRenderBulletMeshes // Render bullet meshes (point to entity)
debugRenderCollisionDistance // Distance to render debug brushes and patches
debugRenderColoredPatches // Render each patch with a different color (Render Patches must be on)
debugRenderEntityBrushes // Render the brushes associated with the entity you are looking at
debugRenderGjkTraceGeom // Render gjk trace meshes
debugRenderMask // Mask for collision rendering
debugRenderPatches // Render patches
debugRenderStaticModelsBounds // Render the bounds of the nearby static models
debugStats // Print messages showing when persistent stats are set
debug_dogs "0"
debug_dog_anims "0"
debug_dog_anims_ent "0"
debug_dog_notetracks "0"
debug_dog_orient "0"
debug_dog_sound "0"
debug_dog_turns "0"
debug_dog_usage "1"
debug_rope // Enables the debug rendering for the ropes
debug_trace // Does a trace and draws the hit point
dec20_Enabled // enable dec20 terminal
defaultDamageDuration // default duration in milliseconds that damage should continue to get delivered
defaultDamageInterval // default interval in milliseconds that damage should continue to get delivered
defaultHitDamage // default initial damage delivered by getting hit by a flame ball
defragGlassIndices // Enable glass memory defragmentation
defragGlassMemory // Enable glass memory defragmentation
demo_bookmarkEventThresholdTime // The time duration for which we want to show the bookmark event image in the demo timeline.
demo_bytesPerSecondMax // Max amount of bytes to send per second before throttling.
demo_bytesPerSecondMin // Min amount of bytes to send per second before throttling.
demo_client // Current viewing player
demo_cmdnum // The number of the command sent from console/ingame menu.
demo_controllerConfig // The number of the command sent from console/ingame menu.
demo_debug // Debug info for the Server Snapshot Demo system
demo_defaultSegmentTag
demo_drawdebuginformation // Used to draw debug information.
demo_enabled // Used to turn the system on/off.
demo_errormessage
demo_errortitle
demo_filesizeLimit // The maximum filesize (in MB) of the demos which we support.
demo_keyframerate // Used to specify the rate(in sec) at which we generate a keyframe during playback.
demo_packetsPerSecondMax // Max amount of packets to send per second before throttling.
demo_packetsPerSecondMin // Min amount of packets to send per second before throttling.
demo_pause // Used to pause a demo playback.
demo_recordBasicTraining // Used to turn the basic training recording on/off.
demo_recordingrate // Used to tweak the rate(in msec) at which we write a super snapshot
demo_recordPrivateMatch // Used to turn the private match recording on/off.
demo_save_smp // Used to toggle threaded save for the demo system.
demo_selectedSegmentIndex // Used in the Manage Segments UI. This will be used to know which segment index we have selected.
demo_timescale // The rate at which we want to scale time. For slo-mo it will be time/rate, fast mo. it will be time * rate
demo_timeScaleRate // The rate at which we want to scale time. For slo-mo it will be time/rate, fast mo. it will be time * rate
demo_usefilesystem // Used to turn HDD write ON or OFF.
developer // Enable development environment
developer_script // Enable developer script comments
didyouknow "@MPTIP_MOTION_SENSOR_TIP"
disconnected_ctrls
displaySessionInfo // Output session info
dive2swim // Use to contorl the dive force applied to the player when pressing B in water.
dive_recharge // Use to space out the dive to swim button presses.
dog_debug // MP dog debugging
dog_MeleeDamage // Controls the damage done when dogs attack.
dog_turn180_angle // If the dog needs to turn at this angle or greater, he'll execute the 180-degree turn animation
dog_turn90_angle // If the dog needs to turn at this angle or greater, he'll execute the 90-degree turn animation
dog_turn_min_goal_dist // If the dog is at this distance or less to it's goal, it won't execute any turn animations
doMaintenance // Do cleanup of the glass
door_breach_weapondrop // Turn on/off the waepon drop/rise for during door breach
doublesided_raycasts // turn on double sided ray casts
drawEntityCount // Enable entity count drawing
drawEntityCountPos // Where to draw the entity count graph
drawEntityCountSize // How big to draw the entity count graph
drawKillcamData // Enable drawing server killcam data
drawKillcamDataPos // Where to draw the server killcam graph
drawKillcamDataSize // How big to draw the killcam data graph
drawLagometer // Enable the 'lagometer'
drawServerBandwidth // Enable drawing server bandwidth
drawServerBandwidthPos // Where to draw the server bandwidth graph
dtp // Turn on/off the dive to prone functionality
dtp_exhaustion_window // Determines how long the player has to sprint before the dtp move can trigger
dtp_fall_damage_max_height // If the player dives to prone from more than this dvar value, he will receive kill damage
dtp_fall_damage_min_height // If the player dive to prone from less than this dvar value, he will not receive any kill damage
dtp_max_apex_duration // Determines the max time in milliseconds the dtp will spend at the apex of the jump
dtp_max_slide_addition // Additional slide time should the player land on a mantle-able surface
dtp_max_slide_duration // Determines the max time the slide portion of the dtp move will take
dtp_min_speed // Minimum player speed required to start a DTP or sustain a DTP
dtp_new_trajectory // Use new dive to prone trajectory
dtp_new_trajectory_multiplier // New dive to prone trajectory modifier
dtp_post_move_pause // Duration of the post move pause
dtp_startup_delay // Determines how long the player has to sprint before the dtp move can trigger
dumpStaticModels // Prints info about the static models
dwConsideredConnectedTime // the amount of time in milliseconds when a after a disconnect from Demonware happens before a Com_Error is thrown.
dwDisconnectedTime // The amount of time in milliseconds after a disconnect from Demonware has happened before a Com_Error is thrown.
dwFileFetchTryIntervalBase // Delay in seconds after file fetch fails to the next retry. Exponential growth each retry.
dwFileFetchTryIntervalMax // Max delay in seconds between file fetch tries.
dwFileFetchTryMaxAttempts // Max retry attempts before stopping altogether.
dynEntPieces_angularVelocity // Initial breakable pieces angular velocity
dynEntPieces_impactForce // Force applied when breakable is destroyed
dynEntPieces_velocity // Initial breakable pieces velocity
dynEnt_bulletForce // Force applied from bullet hit
dynEnt_damageRadiusScale // Scale applied to radius for radius damage
dynEnt_explodeForce // Force applied from explosion hit
dynEnt_explodeMaxEnts // The maximum number of dynents that can be awakened by one explosion
dynEnt_explodeMinForce // Force below which dynents won't even bother waking up
dynEnt_explodeSpinScale // Scale of the random offset from the center of mass for explosion forces.
dynEnt_explodeUpbias // Upward bias applied to force directions from explosion hits
dynEnt_sentientAutoActivate // This allows the player and AI to push around dyn ents
dynEnt_spawnedLimit // The max number of extra dynents (not placed on Radiant, spawned from script, or destructibles)
emblem_scroll_delay_first // First repeat delay for emblem editor
emblem_scroll_delay_rest // Repeat delay for emblem editor
enableDvarWhitelist // enable dvar white-list for profile settings
enable_global_wind // enable wind effect
enable_grass_wind // enable grass wind effect
enable_moving_paths // enable moving paths
enable_new_prone_check // enable new prone check
error_menu_info
eventMessageLastFetchTime // Time in milliseconds of the last event message file fetch operation
facepaintLodDist // Distance to stop drawing the player facepaint.
fire_audio_random_max_duration // This is the max duration in msec in between player fire hurt sounds, a random msec from 0 to this is added to the repeat time
fire_audio_repeat_duration // The duration in msec in between player fire hurt sounds
fire_burn_time // the duration in ms that a burn cell will persist
fire_world_damage // the amount of damage to apply from a damage volume caused by world fire
fire_world_damage_duration // the number of seconds over which world fire damage is applied
fire_world_damage_rate // the number of seconds interval over which wolrd fire damage is applied
fixedtime // Use a fixed time rate for each frame
flameVar_editingFlameTable "none"
flameVar_lastFlameTable "none"
flame_config_valid // Internal use only
flame_debug_render // Turn on/off Flamethrower debug rendering
flame_kick_offset // Origin offset for flamethrower view model while firing.
flame_kick_recover_speed // Speed at which the flamethrower view model transitions back from flame_kick_offset.
flame_kick_speed // Speed at which the flamethrower view model transitions to flame_kick_offset.
flame_render // Turn on/off Flamethrower rendering
flame_team_damage // Turn on/off Flamethrower damage to friendlies
flame_test // Turn on/off Flamethrower testing
flame_use_dvars // Turn on/off use of dvars for flamethrower behavior
flareBurnOutFadeWait "0.65"
flareDisableEffects
flareLookAwayFadeWait "0.45"
flare_distance_scale "16"
flare_duration "8"
flare_effect_height "65"
flare_effect_radius "400"
footstep_sounds_cutoff // Footstep sounds distance cuttoff
freeBuffersDelay // Frames delay until vertex & index buffers are freed
friction // Player friction
friendsNewsLastFetchTime // Time in milliseconds of the last time we got friends' news updates.
fsDebugRatingValue // Rating value for debugging the star ownerdraw.
fshDebugFileList // Replaces feeder data with file IDs for file share debugging.
fshFakePremium // Fakes a premium subscription to online services when set.
fshLiveBlurb
fshSelectFirstSlotRow // Indicates if the first row in the 2d slot feeder must be selected when focused.
fshSelectLastSlotRow // Indicates if the last row in the 2d slot feeder must be selected when focused.
fsIsSelectedFileDescriptionModified // A flag which gives us information if a selected file's description is modified.
fsIsSelectedFileNameModified // A flag which gives us information if a selected filename is modified.
fsMaxPrivateSlotRowsOther // The maximum number of rows for the user's friend's file share while displaying the 2d private slots feeder.
fsOtherUserPrivateSlotCol // Selected column in the 2d private slots feeder for the other user.
fsOtherUserSlotSelected // Other playre's slot selected while transferring to My File Share
fsPrivateSlotCol // Selected column in the 2d private slots feeder.
fsSearchFileType // File type on which to perform search
fsSearchRowText1 "@MENU_FILESHARE_MOSTRECENT"
fsSearchRowText2 "@MENU_ALL"
fsSearchRowText3 "@MENU_ALL"
fsSearchRowText4 "@MENU_ALL"
fsSearchRowText5 "@MENU_ALL"
fsSearchRowText6 "@MENU_ALL"
fsSearchRowValue1 // Search value dvar for search spinner rows.
fsSearchRowValue2 // Search value dvar for search spinner rows.
fsSearchRowValue3 // Search value dvar for search spinner rows.
fsSearchRowValue4 // Search value dvar for search spinner rows.
fsSearchRowValue5 // Search value dvar for search spinner rows.
fsSearchRowValue6 // Search value dvar for search spinner rows.
fsSearchSelectedRow // Selected search box row in the file share search menu.
fsSelectedFileDescription
fsSelectedFileID
fsSelectedFileName
fsSelectedFileTagIndex // The tag index of the selected file.
fsShowStreamingGraph // Shows a graph in-game with streaming history information.
fsSlotEmptyHiddenColor // Color of the material depicting a private slot when not selected.
fsSlotEmptyMainColor // Color of the empty slot. Must be completely opaque to reduce the background to an outline.
fsSlotEmptyNotSubscribedColor // Color of emtpy slot that is also classified.
fsSlotEmptyShowColor // Color of the material depicting a private slot when not selected.
fsSlotEmptyShowColorBg // Color of the material depicting a private empty slot background when not selected.
fsSlotHighlightedColor // Color of the material depicting a private slot when selected.
fsSlotHighlightedColorNoSel // Color of the material depicting a private slot when selected but cannot be chosen.
fsSlotMainColor // Color of the material depicting a private slot when not selected.
fsSlotNumMainColor // Color of the slot number
fsSlotNumNoSubsribeColor // Color of the empty slot when not a subscriber
fsStarAvgColor // Highlight color for star ratings average while rating.
fsStarHighlightColor // Highlight color for star ratings.
fxfrustumCutoff // Hit effects that are more than <this value> outside of the frustum will be culled.
fx_batched_smp_update // Turn on effect smp update
fx_count // Debug effects count
fx_cull_effect_spawn // Culls entire effects for spawning
fx_cull_elem_draw // Culls effect elems for drawing
fx_cull_elem_spawn // Culls effect elems for spawning
fx_debugBolt // Debug effects bolt
fx_draw // Toggles drawing of effects after processing
fx_drawClouds // Toggles the drawing of particle clouds
fx_draw_weapon_tags // Render weapon tag axis
fx_enable // Toggles all effects processing
fx_freeze // Freeze effects
fx_marks // Toggles whether bullet hits leave marks
fx_marks_ents // Toggles whether bullet hits leave marks on entities
fx_marks_range // marks will be made only within this range to camera
fx_marks_smodels // Toggles whether bullet hits leave marks on static models
fx_mark_profile // Turn on FX profiling for marks (specify which local client, with '1' being the first.)
fx_priority_debug // Turn on priority debug (specify which local client, with '1' being the first.)
fx_priority_enable // Turn on priority
fx_profile // Turn on FX profiling (specify which local client, with '1' being the first.)
fx_seethru_parallax // Toggles the drawing of parallax see-through decals
fx_visMinTraceDist // Minimum visibility trace size
geographicalMatchmaking // Geographical Matchmaking : Off, Preferred or Only
geographicalMatchmakingOverride // Geographical Matchmaking Override : None, All Preferred or Foreign Preferred
glassCrackedDamageRateRange // Range of the rate a cracked glass looses health points
glassDamageMultiplier // Multiplier the damage applied to the glass (server).
glassExtraVelocity // Additional random extra angular velocity to the shards when shattering, and extra linear velocity when cracked glass times out.
glassForceAttenuation // Attenuation of the force as the shard is farther from the hit position.
glassForceMultiplier // Multiplier of the force to apply to shards.
glassForceOriginMult // Multiplier of the distance of the origin of the shards spread point - the smaller it is, closer to the glass then the shards will spread to the sides. The farther it is the shards will fly in the same direction.
glassLowLodDist // Adjusted (by fov) distance to switch to low glass lod
glassMaxShardLife // Maximum life time of a shard that is contolled by the glass physics
gpad_buttonsConfig "buttons_default"
gpad_button_deadzone // Game pad button deadzone threshhold
gpad_button_lstick_deflect_max // Game pad maximum pad stick pressed value
gpad_button_rstick_deflect_max // Game pad maximum pad stick pressed value
gpad_debug // coder use only
gpad_menu_scroll_delay_first // Menu scroll key-repeat delay, for the first repeat, in milliseconds
gpad_menu_scroll_delay_rest // Menu scroll key-repeat delay, for repeats after the first, in milliseconds
gpad_rumble // Enable game pad rumble
gpad_sticksConfig "thumbstick_default"
gpad_stick_deadzone_max // Game pad maximum stick deadzone
gpad_stick_deadzone_min // Game pad minimum stick deadzone
gpad_stick_pressed // Game pad stick pressed threshhold
gpad_stick_pressed_hysteresis // Game pad stick pressed no-change-zone around gpad_stick_pressed to prevent bouncing
grenadeBounceRestitutionMax // Cap to keep code from increasing bounce restitution too high.
grenadeBumpFreq // How likely (per server frame) a bump will occur
grenadeBumpMag // Size of bumps (as a fraction of the grenade's current speed)
grenadeBumpMax // Maximum upward speed of a bump (inches/sec)
grenadeCurveMax // Largest rolling curvature (will be random between +/- this value)
grenadeFrictionHigh // The amount of friction (0 to 1) for fast-moving grenades
grenadeFrictionLow // The amount of friction (0 to 1) for slower/rolling grenades
grenadeFrictionMaxThresh // The speed threshold that determines whether to use grenadeFrictionLow/High
grenadeRestThreshold // The speed threshold below which grenades will come to rest
grenadeRollingEnabled // Enables the new "rolling" grenade behavior
grenadeWobbleFreq // Wobble cycles per inch of rolling distance (approx)
grenadeWobbleFwdMag // The forward rolling speed will oscillate +/- this amount
grenadeWobbleSideDamp // The rate at which the amount of side-to-side wobbling decreases as overall grenade speed increases
grenadeWobbleSideMag // The distance to wobble left and right
g_ai // Enable AI
g_aiEventDump // Print AI events happening for this entity
g_allowvote // Enable voting on this server
g_allow_teamchange // Enable changing teams on this server
g_antilag // Turn on antilag checks for weapon hits
g_banIPs
g_clonePlayerMaxVelocity // Maximum velocity in each axis of a cloned player
g_compassShowEnemies // Whether enemies are visible on the compass at all times
g_deadChat // Allow dead players to chat with living players
g_debugBullets // Show debug information for bullets
g_debugDamage // Show debug information for damage
g_debugLocDamage // Turn on debugging information for locational damage (2 = show results of bullet trace pose only)
g_debugLocHit // Display locational damage info for an entity when the entity is hit
g_debugLocHitTime // Time duration of g_debugLocHit lines
g_dropForwardSpeed // Forward speed of a dropped item
g_dropHorzSpeedRand // Random component of the initial horizontal speed of a dropped item
g_dropUpSpeedBase // Base component of the initial vertical speed of a dropped item
g_dropUpSpeedRand // Random component of the initial vertical speed of a dropped item
g_dumpAnims // Animation debugging info for the given character number
g_entinfo // Display entity information
g_entinfo_AItext // Type of text information for AI entinfo
g_entinfo_maxdist // Maximum distance of an entity from the camera at which to show entity information
g_entinfo_scale // Scale of the entity information text
g_entinfo_type // Type of entities to display information
g_erroronpathsnotconnected // Errors out during load if paths are not connected.
g_FactionName_Allies "usa_cia"
g_FactionName_Axis "rus_spet"
g_fogColorReadOnly // Fog color that was set in the most recent call to "setexpfog"
g_fogHalfDistReadOnly // Fog start distance that was set in the most recent call to "setexpfog"
g_fogStartDistReadOnly // Fog start distance that was set in the most recent call to "setexpfog"
g_friendlyfireDist // Maximum range for disabling fire at a friendly
g_friendlyNameDist // Maximum range for seeing a friendly's name
g_gametype "tdm"
g_inactivity // Time delay before player is kicked for inactivity
g_knockback // Maximum knockback
g_listEntity // List the entities
g_loadScripts // Disable scripts from loading
g_log "games_mp.log"
g_logSync // Enable synchronous logging
g_logTimeStampInSeconds // Enable logging with time stamps in seconds since UTC 1/1/1970
g_mantleBlockTimeBuffer // Time that the client think is delayed after mantling
g_maxDroppedWeapons // Maximum number of dropped weapons
g_minGrenadeDamageSpeed // Minimum speed at which getting hit be a grenade will do damage (not the grenade explosion damage)
g_motd
g_no_script_spam // Turn off script debugging info
g_oldVoting // Use old voting method
g_password
g_playerCollisionEjectSpeed // Speed at which to push intersecting players away from each other
g_redCrosshairs // Whether red crosshairs are enabled
g_revive // Enable revive
g_ScoresColor_Allies // Allies team color on scoreboard
g_ScoresColor_Axis // Axis team color on scoreboard
g_ScoresColor_EnemyTeam // Enemy team color on scoreboard
g_ScoresColor_Free // Free Team color on scoreboard
g_ScoresColor_MyTeam // Player team color on scoreboard
g_ScoresColor_Spectator // Spectator team color on scoreboard
g_smoothClients // Enable extrapolation between client states
g_spawnai // Enable AI spawning
g_speed // Player speed
g_synchronousClients // Call 'client think' exactly once for each server frame to make smooth demos
g_TeamColor_Allies // Allies team color
g_TeamColor_Axis // Axis team color
g_TeamColor_EnemyTeam // Enemy team color
g_TeamColor_EnemyTeamAlt // Enemy team color
g_TeamColor_Free // Free Team color
g_TeamColor_MyTeam // Player team color
g_TeamColor_MyTeamAlt // Player team color
g_TeamColor_Spectator // Spectator team color
g_TeamColor_Squad // Squad color
g_TeamIcon_Allies "faction_128_specops"
g_TeamIcon_Axis "faction_128_spetsnaz"
g_TeamIcon_Free
g_TeamIcon_Spectator
g_TeamName_Allies "MPUI_SPECOPS_SHORT"
g_TeamName_Axis "MPUI_RUSSIAN_SHORT"
g_turretBipodOffset // Offset bipod mount position on gun by this distance
g_turretServerPitchMax // Limit turret pitch range on server (visual only)
g_turretServerPitchMin // Limit turret pitch range on server (visual only)
g_useholdspawndelay // Time in milliseconds that the player is unable to 'use' after spawning
g_useholdtime // Time to hold the 'use' button to activate use
g_vehicleDebug // Turn on debug information for vehicles
g_vehicleDrawPath
g_voiceChatTalkingDuration // Time after the last talk packet was received that the player is considered by the
g_voteAbstainWeight // How much an abstained vote counts as a 'no' vote
heatMapLoadDelay // Time in milliseconds to delay the loading of the heatmap.
hiDef // True if the game video is running in high-def.
highlightedPlayerClanTag
highlightedPlayerName
highlightedPlayerXuid
hudElemPausedBrightness // Brightness of the hudelems when the game is paused.
hud_deathQuoteFadeTime // The time for the death quote to fade
hud_fadeout_speed // The speed that the HUD will fade at
hud_fade_ammodisplay // The time for the ammo display to fade in seconds
hud_fade_compass // The time for the compass to fade in seconds
hud_fade_healthbar // The time for the health bar to fade in seconds
hud_fade_offhand // The time for the offhand weapons to fade in seconds
hud_fade_sprint // The time for the sprint meter to fade in seconds
hud_fade_stance // The time for the stance to fade in seconds
hud_fade_vehiclecontrols // The time for the vehicle controls to fade in seconds
hud_flash_period_offhand // Offhand weapons flash period on changing weapon
hud_flash_time_offhand // Offhand weapons flash duration on changing weapon
hud_healthOverlay_phaseEnd_fromAlpha // Starting alpha of the final health overlay phase
hud_healthOverlay_phaseEnd_pulseDuration // Time in milliseconds to fade out the health overlay after it is done flashing
hud_healthOverlay_phaseEnd_toAlpha // Alpha multiplier to fade to before turning off the overlay (percentage of the pulse peak)
hud_healthOverlay_phaseOne_pulseDuration // Pulse duration of the first health overlay phase
hud_healthOverlay_phaseOne_toAlphaAdd // Alpha value to add to the first health overlay phase
hud_healthOverlay_phaseThree_pulseDuration // Time in milliseconds to fade the alpha to hud_healthOverlay_phaseThree_toAlphaMultiplier
hud_healthOverlay_phaseThree_toAlphaMultiplier // Alpha multiplier for the third health overlay phase (percentage of the pulse peak)
hud_healthOverlay_phaseTwo_pulseDuration // Time in milliseconds to fade the alpha to hud_healthOverlay_phaseTwo_toAlphaMultiplier
hud_healthOverlay_phaseTwo_toAlphaMultiplier // Alpha multiplier for the second health overlay phase (percentage of the pulse peak)
hud_healthOverlay_pulseStart // The percentage of full health at which the low-health warning overlay begins flashing
hud_healthOverlay_pulseStop // The percentage of full health above which the health overlay fades out
hud_healthOverlay_regenPauseTime // The time in milliseconds before the health regeneration kicks in
hud_health_pulserate_critical // The pulse rate of the 'critical' pulse effect
hud_health_pulserate_injured // The pulse rate of the 'injured' pulse effect
hud_health_startpulse_critical // The health level at which to start the 'critical' pulse effect
hud_health_startpulse_injured // The health level at which to start the 'injured' pulse effect
ik_actor_tracking_scale // Adjust the amount of rotation that is applied during head/eye tracking
ik_ai_hand_offset_vec // Offset vector for hand tuning
ik_ai_hand_rotation_vec // Rotation vector for hand tuning
ik_ai_hand_tuning // Turn on/off AI hand IK tuning. 1 = Use anim flag. 2 = Force on for all anims.
ik_debug // Set to one of the IK debug values in ik_types.h
ik_dvar_lookatentity_notorso // No torso deformation in lookatentity transforms
ik_enable // Turn on/off IK
ik_enable_ai_hand // Turn on/off AI hand IK
ik_enable_ai_terrain // Turn on/off AI terrain IK (0 = OFF, 1 = All, 2 = Heros)
ik_enable_player_hand // Turn on/off player hand IK
ik_enable_player_terrain // Turn on/off player terrain IK
ik_foot_test // Turn on/off IK foot test
ik_hand_test // Turn on/off IK hand test
ik_left_hand_lerp_test // Turn on/off left-hand lerp test
ik_paranoid_matrix_checks // Turn on/off THOROUGH matrix validity checks
ik_pelvis_test // Turn on/off IK pelvis test
ik_pitch_limit_max // Pitch angle at which headtracking is entirely constrained
ik_pitch_limit_thresh // Pitch angle at which headtracking starts to be constrained
ik_right_hand_lerp_test // Turn on/off right-hand lerp test
ik_roll_limit_max // Roll angle at which headtracking is entirely constrained
ik_roll_limit_thresh // Roll angle at which headtracking starts to be constrained
ik_yaw_limit_max // Yaw angle at which headtracking is entirely constrained
ik_yaw_limit_thresh // Yaw angle at which headtracking starts to be constrained
input_autoAim // Turn on auto aim for consoles
input_invertPitch // Invert gamepad pitch
input_targetAssist // Turn on target assist for consoles
input_viewSensitivity // View Sensitivity
invite_visible "1"
itemSellFactor // Factor by which to multiply the item cost to get the item sell price.
joinsession_errorMessage
joinsession_errorMessageDebug
joinsession_errorTitle
jump_height // The maximum height of a player's jump
jump_ladderPushVel // The velocity of a jump off of a ladder
jump_slowdownEnable // Slow player movement after jumping
jump_spreadAdd // The amount of spread scale to add as a side effect of jumping
jump_stepSize // The maximum step up to the top of a jump arc
koth_autodestroytime "1000"
koth_capturetime "20"
koth_delayPlayer "0"
koth_destroytime "100"
koth_kothmode "0"
koth_spawnDelay "1000"
koth_spawntime "45"
language "english"
lb_escrowRefresh // How often to check escrow for unclaimed funds
lb_escrowTimeout // Time to wait before funds in escrow are returned to clients
lb_filter // Filter applied to the leaderboard display: ('none','friends')
lb_forceLbWrite // Set this to to true for writing to the leaderboards without checking for the minimum requirements for different leaderboard types.
lb_LastFetchTime // Time in milliseconds you wait before fetching the leaderboard
lb_maxrows // Maximum number of rows to fetch
lb_minrefresh // Minimum time (in seconds) between leaderboard fetches
lb_prestige // True when prestige leaderboards have been purchased
lb_type // Leaderboard type to display
lb_typeByResetPeriod // Reset period for Leaderboards ( 'all_time', 'monthly', weekly )
legacy_zombiemode // Current game is a legacy zombie game
liveNewsMaxCounters // Maximum global counters in the counters stream
loc_forceEnglish // Force english localized strings
loc_language // Language
loc_translate // Enable translations
loc_warnings // Enable localization warnings
loc_warningsAsErrors // Throw an error for any unlocalized string
logfile // Write to log file - 0 = disabled, 1 = async file write, 2 = Sync every write
long_blocking_call // Enable SCR_DrawPleaseWait dialog
lowAmmoWarningColor1 // Color 1 of 2 to oscilate between
lowAmmoWarningColor2 // Color 2 of 2 to oscilate between
lowAmmoWarningNoAmmoColor1 // Like lowAmmoWarningColor1, but when no ammo.
lowAmmoWarningNoAmmoColor2 // lowAmmoWarningColor2, but when no ammo.
lowAmmoWarningNoReloadColor1 // Like lowAmmoWarningColor1, but when no ammo to reload with.
lowAmmoWarningNoReloadColor2 // lowAmmoWarningColor2, but when no ammo to reload with.
lowAmmoWarningPulseFreq // Frequency of the pulse (oscilation between the 2 colors)
lowAmmoWarningPulseMax // Min of oscilation range: 0 is color1 and 1.0 is color2. Can be < 0, and the wave will clip at 0.
lowAmmoWarningPulseMin // Max of oscilation range: 0 is color1 and 1.0 is color2. Can be > 1.0, and the wave will clip at 1.0.
ls_gametype "TEAM DEATHMATCH"
ls_mapname "NUKETOWN"
ls_status "Waiting for other players"
mantle_check_angle // The minimum angle from the player to a mantle surface to allow a mantle
mantle_check_glass_extra_range // The extra distance to test if glass is
mantle_check_radius // The player radius to test against while mantling
mantle_check_range // The minimum distance from a player to a mantle surface to allow a mantle
mantle_debug // Show debug information for mantling
mantle_enable // Enable player mantling
mantle_view_yawcap // The angle at which to restrict a sideways turn while mantling
mantle_weapon_anim_height // If the player is mantling at this height or higher, the mantle animation will play.
mantle_weapon_height // If the player is mantling at this height or lower, his weapon will remain equipped.
mapcrc // crc of the map file
mapname "mp_nuked"
matchmaking_debug // Enable matchmaking debugging information
maxAttachmentsPerWeapon // Max attachments allowed for a weapon
maxBadHosts // Maximum number of times that a bad host can host a live game
maxShardSplit // Max number of shards that a glass can be split into
maxStatsBackupInterval // Maximum number of days before performing stats backup to Demonware User Storage
maxStatsFlushInterval // Maximum number of days before performing stats flush to key archive
melee_debug // Turn on debug lines for melee traces
metPlayerListUpdateInterval // Time in milliseconds since uploaded recent met player list.
metPlayerListUploadInterval // This dvar is used to make sure that recent met player list get updates only when it changes.
migrationPingTime // how many seconds between client pings. used to determine hosting suitability.
migration_blocksperframe // Number of blocks to send out each server frame. A value of 0 means base it off our tested bandwidth.
migration_limit // maximum number of migrations within migration_timeBetween dvar's value in milliseconds.
migration_msgtimeout // timeout time in ms of migration messages
migration_timeBetween // milliseconds between migration_limit dvar's value of migrations.
minDelayForOtherPlayerStatsFetch // Delay in milliseconds to refetch the stats of a player.
missileDebugAttractors // Draw the attractors and repulsors. Attractors are green, and repulsors are yellow.
missileDebugDraw // Draw guided missile trajectories.
missileDebugText // Print debug missile info to console.
missileHellfireMaxSlope // This limits how steeply the hellfire missile can turn upward when climbing
missileHellfireUpAccel // The rate at which the hellfire missile curves upward
missileJavAccelClimb // Rocket acceleration when climbing.
missileJavAccelDescend // Rocket acceleration when descending towards target.
missileJavClimbAngleDirect // In direct-fire mode, the minimum angle between the rocket and target until the rocket stops climbing. Smaller angles make for higher climbs.
missileJavClimbAngleTop // In top-fire mode, the minimum angle between the rocket and target until the rocket stops climbing. Smaller angles make for higher climbs.
missileJavClimbCeilingDirect // In direct-fire mode, how high the missile needs to reach before it descends.
missileJavClimbCeilingTop // In top-fire mode, how high the missile needs to reach before it descends.
missileJavClimbHeightDirect // In direct-fire mode, how far above the target the rocket will aim for when climbing.
missileJavClimbHeightTop // In top-fire mode, how far above the target the rocket will aim for when climbing.
missileJavClimbToOwner
missileJavSpeedLimitClimb // Rocket's speed limit when climbing.
missileJavSpeedLimitDescend // Rocket's speed limit when descending towards target.
missileJavTurnDecel
missileJavTurnRateDirect // In direct-fire mode, how sharp the rocket can turn, in angles/sec.
missileJavTurnRateTop // In top-fire mode, how sharp the rocket can turn, in angles/sec.
missileMolotovBlobNum // The number of fire blobs a molotov should spawn on impact, these count against the server entities.
missileMolotovBlobTime // The life time of a molotov fire blob in seconds.
missilePlantableSize // Size of the bounding box used for plantable equipment collision.
missileTVGuidedBoost // The multiplier that the TV guided missile recieves while boosting.
missileTVGuidedBoostSpeedDown // Speed decrease factor to return from full boost.
missileTVGuidedBoostSpeedUp // Speed increase factor to get to full boost.
missileTVGuidedFlatteningRollAccel // Roll acceleration when the missile is flattening out after a turn.
missileTVGuidedMaxRollAngle // Max roll the missile will have when turning.
missileTVGuidedMPSpecific // MP specific Guided Missile functionality
missileTVGuidedStickDeadzone // defines the dead zone for stick movement (stick values range from -128..127
missileTVGuidedTurningRollAccel // Roll acceleration when the missile is turning.
missileTVGuidedTurnRate // max turn rate of a tv guided missile (multiplied by the stick deflection [0-1])
missileWaterMaxDepth // If a missile explodes deeper under water than this, they explosion effect/sound will not play.
monkeytoy // Restrict console access
mortarStrikesLeft // Mortar locations not positioned yet
motd "Multiplayer. Free with every copy of Call of Duty: Black Ops."
msg_dumpEnts // Print snapshot entity info
msg_hudelemspew // Debug hudelem fields changing
msg_printEntityNums // Print entity numbers
msg_zlibCompress // Enable zlib compression
msg_zlibCompressOutput // Enable zlib compression console output
m_filter // Allow mouse movement smoothing
m_forward // Forward speed in units per second
m_pitch // Default pitch
m_side // Sideways motion in units per second
m_yaw // Default yaw
name "aaron"
narrowShardRatio // minimum ratio between a shard's local bbox edges or between the shard's bbox area vs the shard's area to cause the shard to be rejected
net_ip "localhost"
net_lanauthorize // Authorise CD keys when using a LAN
net_minigraph // Show the small network profile display
net_port // Network port
net_profile // Profile network performance
net_showprofile // Show network profiling display
nextdemo
nextHostTimeout // Time after a bad hosting before can host again in seconds
nextmap "map_restart"
nightVisionDisableEffects
nightVisionFadeInOutTime // How long the fade to/from black lasts when putting on or removing night vision goggles.
nightVisionPowerOnTime // How long the black-to-nightvision fade lasts when turning on the goggles.
onlinegame // Current game is an online game with stats, custom classes, unlocks
onlinegameandhost // true only if this is an xbox live game AND we're the host, otherwise false
onlineunrankedgameandhost // true only if this is an xbox live RANKED game AND we're the host, otherwise false
overrideNVGModelWithKnife // When true, nightvision animations will attach the weapDef's knife model instead of the night vision goggles.
packetDebug // Enable packet debugging information
partyChatDisallowed // Whether to disallow Xbox Live Party Chat
partyChatDisconnectTimer // Time to wait after user responds to Party Chat dialog before kicking (msec)
party_allowguests // Whether or not guests are allowed in the playlist
party_autoteams // Enables/Disables auto team functionality
party_clientTimeout // After not hearing from the host for this amount of time the client will timeout of the party
party_connectTimeout // Connect timeout
party_connectToOthers // If false, we will just start our own lobby rather than connect to another lobby, even if others exist
party_currentMapVetoCount // Current map vote count
party_debug // Debug party functionality
party_editingsettings // True if the host is editing game settings
party_firstSubpartyIndex // Determines sort order and coloring of parties in lobbies. Randomly set by code. Dvar provided for debugging.
party_gamesize
party_gameStartTimerLength // Time in seconds before a game start once enough party members are ready
party_gametype
party_headtohead // True if the current playlist is head to head
party_host // True if we are the host of the party
party_hostname
party_iamhost // True if selected player is you and if you are the host. Only valid when used with party feeders.
party_joinInProgressAllowed // The party can be joined in the middle of a game
party_kickplayerquestion
party_linearMapCycle // We will cycle through the maps linearly if this is true.
party_linearMapCycleRandom // We will cycle through the maps linearly if this is true but picks a random start map.
party_lobbyPlayerCount
party_localTeamTest // When true, a local team test is being carried out, so real xuids will be absent.
party_mapname
party_mappacks
party_matchedPlayerCount // Number of matched players before revealing their true names
party_maxlocalplayers // Maximum number of players in a party
party_maxlocalplayers_basictraining // Maximum number of players in a party
party_maxlocalplayers_playermatch // Maximum number of players in a party
party_maxlocalplayers_privatematch // Maximum number of players in a party
party_maxlocalplayers_theater // Maximum number of players in a party
party_maxlocalplayers_wagermatch // Maximum number of players in a party
party_maxplayers // Maximum number of players in a party
party_maxplayers_basictraining // Maximum number of players in a party
party_maxplayers_partylobby // Maximum number of players in a party
party_maxplayers_playermatch // Maximum number of players in a party
party_maxplayers_privatematch // Maximum number of players in a party
party_maxplayers_theater // Maximum number of players in a party
party_maxplayers_wagermatch // Maximum number of players in a party
party_maxplayers_wagerpartylobby // Maximum number of players in a party
party_maxTeamDiff // Maximum difference allowed between teams before starting a match
party_membersMissingMapPack // Whether any party member is missing one of the enabled map packs. Only valid after running partyUpdateMissingMapPackDvar
party_minLobbyTime // Minimum time (in seconds) for a lobby to be open before auto starting a match
party_minplayers // Minimum number of players in a party
party_minResumeMs // Time in ms before accepting another 'go' message after quitting a game
party_nextMapVetoCount // Next map vote count
party_partyPlayerCount
party_playerCount // Number of players currently in that party/lobby.
party_playervisible // Whether selected player in party is showing true info or not. Only valid when used with party feeders.
party_pregameStartTimerLength // Time in seconds before showing and starting the game start timer
party_previousMapVetoCount // Previous map vote count
party_privacyStatus // Party privacy status: open/open to friends/open to clan/invite only/closed
party_readyButtonVisible // The party ready button is visible in the UI
party_readyPercentRequired // The fraction of the waiting players who need to be ready for a party to start
party_simulateLongQoS // simulate a real QoS which takes around 30 seconds
party_teambased // True if the current playlist is team based
party_timer // Time until game begins in seconds, for UI display
party_timerVisible // party timer is visible in UI
party_vetoButtonVisible // The party veto button is visible in the UI
party_vetoDelayTime // Delay time in seconds for a successful map vote to execute
party_vetoPassed // Did the veto pass?
party_vetoPercentRequired // The fraction of the waiting players who need to veto for a map to be skipped
password
penetrationCount // Maximum number of private clients allowed on the server
penetrationCount_allies // Maximum number for TEAM_ALLIES
penetrationCount_axis // Maximum number for TEAM_AXIS
perk_armorPiercing // Percent bullet damage is increased for helicopters, spy planes, and turrets.
perk_armorVest "80"
perk_blackbirdShowsGpsJammer // Set to true if the blackbird should show players with 'specialty_gpsjammer'
perk_bulletDamage "35"
perk_bulletPenetrationMultiplier // Multiplier for extra bullet penetration
perk_damageKickReduction // The percentage decrease of view kick flinch when the player takes damage
perk_deathStreakCountRequired // Number of deaths required to obtain a deathstreak.
perk_delayExplosiveTime // Time in seconds to delay a proximity explosive
perk_disarmExplosiveTime // Time in seconds to disarm a proximity explosive
perk_dogsAttackGhost // Set to true if the dogs should attack players with 'specialty_nottargetedbyai'
perk_explosiveDamage "25"
perk_extraBreath // Number of extra seconds a player can hold his breath
perk_extraMoneyMultiplier // Multiplier for extra COD points.
perk_fireproof // Percent to reduce flame damage done to the player.
perk_flakJacket // Percent of explosive damage done that will apply to player.
perk_flakJacket_hardcore // Percent of explosive damage done that will apply to player in hardcore.
perk_grenadeDeath "frag_grenade_short_mp"
perk_grenadeTossBackTimer // Minimum timer for a grenade. If the time left is less than this it will be bumped up. Tossback Perk
perk_healthRegenMultiplier // Multiplier to the time which the player starts to regenerate health after damage
perk_interactSpeedMultiplier // Multiplier for increasing use timers.
perk_killstreakReduction // Reduced number of kills required to obtain a killstreak.
perk_mantleReduction // The percentage decrease of mantle up time
perk_shellShockReduction // The percentage decrease of shellshock time
perk_speedMultiplier // Player speed multiplier
perk_sprintMultiplier // Multiplier for player_sprinttime
perk_sprintRecoveryMultiplier // Percent of sprint recovery time to use.
perk_throwbackInnerRadius // The radius to a live grenade player must be within initially to do a throwback with the toss back perk on
perk_weapAdsMultiplier // Percentage of weapon ADS rate to use
perk_weapMeleeMultiplier // Percentage of weapon melee recovery rate to use
perk_weapRateMultiplier // Percentage of weapon firing rate to use
perk_weapReloadMultiplier // Percentage of weapon reload time to use
perk_weapSpreadMultiplier // Percentage of weapon spread to use
perk_weapSwitchMultiplier // Percentage of weapon switching rate to use
phys_ai_collision_mode // phys ai collision mode
phys_bulletSpinScale // Scale of the effective offset from the center of mass for the bullet impacts.
phys_bulletUpBias // Up Bias for the direction of the bullet impact.
phys_buoyancy // Used to turn on/off buoyancy
phys_buoyancyDistanceCutoff // Objects that are too far will sink.
phys_buoyancyFastComputation // Simplify the buoyancy calculations
phys_buoyancyRippleFrequency // How often (in ms) floating objects will play the ripple fx
phys_buoyancyRippleVariance // How late (in ms) the ripple fx can be played
phys_debugBigQueries // Draw debug info when phys object moves very fast therefore generating huge query boxes
phys_debugCallback // Enbles the physics debug callback
phys_debugDangerousRigidBodies // Draws debug line off the origins of dangerous rigid bodies
phys_debugExpensivePushout // Draw debug info when the engine resort to exensive Player/AI pushouts
phys_dragAngular // The amount of angular drag, applied globally
phys_dragLinear // The amount of linear drag, applied globally
phys_drawCollisionObj // Debug draw collision geometry for each physics object
phys_drawcontacts // Debug draw contact points
phys_drawNitrousVehicle // Print info about the nitrous vehicles
phys_drawNitrousVehicleEffects // Print info about the nitrous vehicle wheel effects
phys_entityCollision // Enable to turn on entity collision.
phys_floatTimeVariance // Variance in time (in ms) objects will float for
phys_fluid // Turn on and off the fluid simulation code
phys_gravity // Physics gravity in units/sec^2.
phys_gravity_dir // Sets the gravity direction.
phys_heavyTankSwitch // Enable 'heavier' tank physics in multiplayer
phys_impact_distance_cutoff // Disable effects that are further than distance_cutoff value. Uses the distance /in inches/ to the closes active player.
phys_impact_fx // Enable/Disable the physics impact effects.
phys_impact_intensity_limit // Lower limit for the intensity of the impact sounds that the engine triggers.
phys_impact_max_pfx_per_frame // Maximum number of particle effects spawned on physics object impact. The value is per frame.
phys_impact_max_sfx_per_frame // Maximum number of sound effects spawned on physics objects impact. The value is per frame.
phys_impact_render // Render a star at the impact origin.
phys_impact_silence_window // The length of the silence window. When a body triggers an impact sound it will not trigger new sounds for the duration of this silence window.
phys_maxFloatTime // Maximum time objects can float (in ms)
phys_msecstep // Physics simulation update increment in milliseconds
phys_piecesSpawnDistanceCutoff // Determine how far we can spawn destructible pieces.
phys_player_collision_adjust_height // adjust the height of the gjk player collision capsule
phys_player_collision_mode // phys player collision mode
phys_ragdoll_buoyancy // Used to turn on/off the buoyancy for he ragdolls
phys_ragdoll_joint_damp_scale // Sets the phys joint damp for ragdolls.
phys_reeval_frequency // Controls how often the engine reevalutes the piority of the physics object. If the object has low priority /its too far or smth/ we dont play effect.
phys_userRigidBodies // Enables user rigid bodies.
phys_vehicleDamageFroceScale // Physics vehicle damamge force scale.
phys_vehicleFriction // Default vehicle friction with the world and other ents.
phys_vehicleGravityMultiplier // Physics gravity multiplier for vehicles.
phys_vehicleUsePredictedPosition // Turning this on forces the client to use the vehicles predicted position.
phys_vehicleWheelEntityCollision // Enable to turn on vehicle wheel entity collision.
phys_waterDragAngular // The amount of angular drag for buoyant objects
phys_waterDragLinear // The amount of linear drag for buoyant objects
pickupPrints // Print a message to the game window when picking up ammo, etc.
playerBanLeaderboardFetchInterval // Time in minutes before re-fetching banned leaderboard info. -1 not to retrieve again after first try
playerCardXuid0 "-2305825514597802612"
playerCardXuid1 "?????????4??? ????????? ?"
playerPushAmount // If this value is set the player will get pushed away from AIs by the amount specified.
player_adsExitDelay // Delay before exiting aim down sight
player_AimBlend_Back_Low // 3rd person player view aim blend - lower back
player_AimBlend_Back_Mid // 3rd person player view aim blend - mid back
player_AimBlend_Back_Up // 3rd person player view aim blend - upper back
player_AimBlend_Head // 3rd person player view aim blend - head
player_AimBlend_Neck // 3rd person player view aim blend - neck
player_AimBlend_Pelvis // 3rd person player view aim blend - pelvis
player_AimBlend_Shoulder // 3rd person player view aim blend - shoulder
player_animRunThreshhold // The speed at which the player will animate as though they are running
player_animWalkThreshhold // The speed at which the player will animate as though they are walking
player_backSpeedScale // The scale applied to the player speed when moving backwards
player_bayonetLaunchDebugging // Simulates bayonet charge without requiring an enemy to do so.
player_bayonetLaunchProof // Adds extra code to check for bayonet launching, preventing related exploits.
player_bayonetLaunchZCap // Max Z velocity during bayonet charge.
player_bayonetRange // The maximum range of the player's bayonet attack
player_bayonetTargetDist // The distance to the enemy the player's will stop charging
player_breath_fire_delay // The amount of time subtracted from the player remaining breath time when a weapon is fired
player_breath_gasp_lerp // The interpolation rate for the target waver amplitude when gasping
player_breath_gasp_scale // Scale value to apply to the target waver during a gasp
player_breath_gasp_time // The amount of time a player will gasp once they can breath again
player_breath_hold_lerp // The interpolation rate for the target waver amplitude when holding breath
player_breath_hold_time // The maximum time a player can hold his breath
player_breath_snd_delay // The delay before playing the breathe in sound
player_breath_snd_lerp // The interpolation rate for the player hold breath sound
player_burstFireCooldown // Seconds after a burst fire before weapons can be fired again.
player_clipSizeMultiplier // Changes the clip size of weapons with more than one bullet in their clip.
player_debugHealth // Turn on debugging info for player health
player_disableWeaponsInWater // Disable weapons while in deep water
player_dmgtimer_flinchTime // Maximum time to play flinch animations
player_dmgtimer_maxTime // The maximum time that the player is slowed due to damage
player_dmgtimer_minScale // The minimum scale value to slow the player by when damaged
player_dmgtimer_stumbleTime // Maximum time to play stumble animations
player_dmgtimer_timePerPoint // The time in milliseconds that the player is slowed down per point of damage
player_enableShuffleAnims // Whether players should play shuffle anims at low speeds
player_enduranceSpeedScale // The scale applied to the player speed when they have endurance perk
player_floatSpeed // The speed at which the player will float up to the top of the water
player_footstepsThreshhold // The minimum speed at which the player makes loud footstep noises
player_forceRedCrosshair // Force the player's crosshair to turn red
player_knockbackMoveThreshhold // The speed threshold before a player is considered to be running forwards
player_lastStandBleedoutTime // The time taken by the player to completely bleedout when in last stand (pro version).
player_lastStandBleedoutTimeNoRevive // The time taken by the player to completely bleedout when in last stand (non-pro version).
player_lastStandHealthOverlayTime // The time at the end of last stand to apply health (red) overlay
player_lean_rotate // Amount to rotate the player 3rd person model when leaning(x:left, y:right)
player_lean_rotate_crouch // Amount to rotate the player 3rd person model when crouch leaning(x:left, y:right)
player_lean_shift // Amount to shift the player 3rd person model when leaning(x:left, y:right)
player_lean_shift_crouch // Amount to shift the player 3rd person model when crouch leaning(x:left, y:right)
player_meleeHeight // The height of the player's melee attack
player_meleeRange // The maximum range of the player's melee attack
player_meleeWidth // The width of the player's melee attack
player_MGUseRadius // The radius within which a player can mount a machine gun
player_moveThreshhold // The speed at which the player is considered to be moving for the purposes of
player_move_factor_on_torso // The contribution movement direction has on player torso direction(multi-player only)
player_revivePlayerListCycleTime // The time for cycling through the list of players who are in last stand.
player_reviveTriggerRadius // The radius for the hint string and revive radius
player_runbkThreshhold // The speed threshold before a player is considered to be running backwards
player_runThreshhold // The speed threshold before a player is considered to be running forwards
player_scopeExitOnDamage // Exit the scope if the player takes damage
player_sliding_friction // Controls the friction during slide.
player_sliding_velocity_cap // Velocity threshold for the player slide.
player_sliding_wishspeed // Controls how fast the player will slide.
player_slopeAnimAngle // Angle at which the player will start animating differently when going up or down slopes
player_spectateSpeedScale // The scale applied to the player speed when spectating
player_sprintCameraBob // The speed the camera bobs while you sprint
player_sprintForwardMinimum // The minimum forward deflection required to maintain a sprint
player_sprintMinTime // The minimum sprint time needed in order to start sprinting
player_sprintRechargePause // The length of time the meter will pause before starting to recharge after a player sprints
player_sprintSpeedScale // The scale applied to the player speed when sprinting
player_sprintStrafeSpeedScale // The speed at which you can strafe while sprinting
player_sprintThreshhold // The speed threshhold before a player is considered to be sprinting
player_sprintTime // The base length of time a player can sprint
player_sprintUnlimited // Whether players can sprint forever or not
player_strafeAnimCosAngle // Cosine of the angle which player starts using strafe animations
player_strafeSpeedScale // The scale applied to the player speed when strafing
player_sustainAmmo // Firing weapon will not decrease clip ammo.
player_swimDamage // Damage the player will take each interval while out of breath in deep water.
player_swimDamagerInterval // Interval in which damage will be dealt while out of breath under water.
player_swimTime // Set the max time the player can swim underwater before taking damage.
player_throwbackInnerRadius // The radius to a live grenade player must be within initially to do a throwback
player_throwbackOuterRadius // The radius player is allow to throwback a grenade once the player has been in the inner radius
player_topDownCamAngles // Sets the pitch for the top down cam
player_topDownCamCenterPos // Set a top down camera influence position, player_topDownCamMode must be set to 3 to use this dvar
player_topDownCamMode // Enabled the top down cam.
player_topDownCamOffset // Sets the camera position relative to the player for the top down cam
player_topDownCursorDist // Distance the virtual mouse cursor is from the player.
player_topDownCursorPos // Position of the virtual mouse cursor is from the player relative to the player.
player_turnAnims // Use animations to turn a player's model in multiplayer
player_turnRateScale // Scales the rotation rate of the player's view.
player_useRadius // The radius within which a player can use things
player_useSlopeAnims // whether to use slope run animations for the player
player_viewLockEnt // Set an entity that the player view will be locked too.
player_viewRateScale // Player view rate scale modifier when player doesn't have a weapon.
player_view_pitch_down // Maximum angle that the player can look down
player_view_pitch_up // Maximum angle that the player can look up
player_waterSpeedScale // Water movement speed scalar. The larger the value, the faster the movement.
playlist // The playlist number
popInLetterFXTime // Time it takes for a letter to pop in.
presell // Set to true if the player has preordered
prestigeclass1 "CUSTOM 6"
prestigeclass2 "CUSTOM 7"
prestigeclass3 "CUSTOM 8"
prestigeclass4 "CUSTOM 9"
prestigeclass5 "CUSTOM 10"
profile_physics // Draw physics & collision profiltimers
prone_bipod_enable // Enable bipods whilst prone
protocol // Protocol version
radius_damage_debug // Turn on debug lines for radius damage traces
ragdoll_baselerp_time // Default time ragdoll baselerp bones take to reach the base pose
ragdoll_bullet_force // Bullet force applied to ragdolls
ragdoll_bullet_upbias // Upward bias applied to ragdoll bullet effects
ragdoll_debug // Draw ragdoll debug info (bitflags)
ragdoll_dump_anims // Dump animation data when ragdoll fails
ragdoll_enable // Turn on ragdoll death animations
ragdoll_explode_force // Explosive force applied to ragdolls
ragdoll_explode_upbias // Upwards bias applied to ragdoll explosion effects
ragdoll_fps // Ragdoll update frames per second
ragdoll_jitter_scale // Scale up or down the effect of physics jitter on ragdolls
ragdoll_jointlerp_time // Default time taken to lerp down ragdoll joint friction
ragdoll_max_life // Max lifetime of a ragdoll system in msec
ragdoll_max_simulating // Max number of simultaneous active ragdolls
ragdoll_reactivation_cutoff // Ragdoll reactivation distance cutoff
ragdoll_rotvel_scale // Ragdoll rotational velocity estimate scale
ragdoll_self_collision_scale // Scale the size of the collision capsules used to prevent ragdoll limbs from interpenetrating
rate // Player's preferred baud rate
recordPointsSpent // Record spending through eventRecordBin
redactionDisplayTime // Time that it should be displayed for.
redactionFadeDuration // Fade duration time.
redactionStartStrokeTime // Time before the stroke starts.
redactionStrokeTime // Time it takes to complete the redaction stroke.
reliableResendTime // Amount of time (in ms) to wait before resending an unack'd reliable message
reliableTimeoutTime // Amount of time (in ms) to wait before timing out a client for not ack'ing a message
render_actor_collision // render actor collision
render_bpi_env_collision // render bpi_env collision
render_player_collision // render player collision
reportUserUploadInterval // Number of seconds before all the global counters are uploaded
reportUserVoteInterval // The interval in minutes you wait before getting another vote on this console as long as the console is turned on.
revive_time_taken // The time it takes to revive a player in last stand.
r_backBufferSize // Size of Back Buffer
r_backBufferSizeY // Size of Back Buffer Y
r_bloomBlurRadius // bloom blur radius
r_bloomColorScale // color scale RGB, desaturation start
r_bloomCurveBreakpoint // lo hi curve breakpoint RGBT
r_bloomCurveHiBlack // curve hi black point RGBT
r_bloomCurveHiGamma // curve hi gamma ramp RGBT
r_bloomCurveHiRemapBlack // curve hi output black point RGBT
r_bloomCurveHiRemapWhite // curve hi output white point RGBT
r_bloomCurveHiWhite // curve hi white point RGBT
r_bloomCurveLoBlack // curve lo black point RGBT
r_bloomCurveLoGamma // curve lo gamma ramp RGBT
r_bloomCurveLoRemapBlack // curve lo output black point RGBT
r_bloomCurveLoRemapWhite // curve lo output white point RGBT
r_bloomCurveLoWhite // curve lo white point RGBT
r_bloomExpansionControl // expansion amount x&y and expansion target x&y
r_bloomExpansionSource // bloom expansion source point
r_bloomExpansionWeights // amount of expansion to lerp in RGBT
r_bloomPersistence // amount of bloom feedback
r_bloomStreakXInnerTint // streak inner tint
r_bloomStreakXLevels0 // level weights RGB, level gamma
r_bloomStreakXLevels1 // level in black white, out black white
r_bloomStreakXOuterTint // streak outer tint
r_bloomStreakXTint // streak tint
r_bloomStreakXTintControl // streak saturation weights, saturation
r_bloomStreakYInnerTint // streak inner tint
r_bloomStreakYLevels0 // level weights RGB, level gamma
r_bloomStreakYLevels1 // level in black white, out black white
r_bloomStreakYOuterTint // streak outer tint
r_bloomStreakYTint // streak tint
r_bloomStreakYTintControl // streak saturation weights, saturation
r_bloomTintScale // tint scale RGB, desaturation end
r_bloomTintWeights // tint weights RGB, desaturation amount
r_bloomTweaks // enbale bloom tweaks
r_blur // Dev tweak to blur the screen
r_blur_allowed // Allow blur.
r_brightness // Brightness adjustment
r_brushLimit // Maximum number of brushes drawn simultaneously
r_burnedDestructibleColor // color of burned destructibles
r_cacheModelLighting // Speed up model lighting by caching previous results
r_cacheSModelLighting // Speed up static model lighting by caching previous results
r_clear // Controls how the color buffer is cleared
r_clearColor // Color to clear the screen to when clearing the frame buffer
r_clearColor2 // Color to clear every second frame to (for use during development)
r_clipCodec // Codec used when rendering clips.
r_clipFPS // Render clip FPS.
r_clipSize // Render clip size.
r_cmdbuf_worker // Process command buffer in a separate thread
r_collectActiveMaterials // print active materials (IN REMOTE CONSOLE)
r_colorMap // Replace all color maps with pure black or pure white
r_contrast // Contrast adjustment
r_debugHDRdlight // debug dlights mode
r_debugHDRdlight_color // dlights debug color
r_debugHDRdlight_distance // distance dlights appear around camera
r_debugHDRdlight_radius // dlights falloff radius
r_debugHDRdlight_scale // dlights color scale
r_debugLayers // Highlight Alpha Blended Polygons.
r_debugLineWidth // Width of server side debug lines
r_debugShader // Enable shader debugging information
r_debugShowCoronas // shows location of coronas
r_debugShowDynamicLights // shows location of dynamic lights
r_debugShowPrimaryLights // shows location of primary lights
r_desaturation // Desaturation adjustment
r_diffuseColorScale // Globally scale the diffuse color of all point lights
r_distortion // Enable distortion
r_dlightLimit // Maximum number of dynamic lights drawn simultaneously
r_dlightMaxFullScreenRadius // Maximum radius to limit dlights to in fullscreen.
r_dlightMaxNonFullScreenRadius // Maximum radius to limit dlights to when not fullscreen
r_dobjLimit // Maximum number of DObjs drawn simultaneously
r_dof_bias // Depth of field bias as a power function (like gamma); less than 1 is sharper
r_dof_enable // Enable the depth of field effect
r_dof_farBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
r_dof_farEnd // Depth of field far end distance, in inches
r_dof_farStart // Depth of field far start distance, in inches
r_dof_nearBlur // Sets the radius of the gaussian blur used by depth of field, in pixels at 640x480
r_dof_nearEnd // Depth of field near end distance, in inches
r_dof_nearStart // Depth of field near start distance, in inches
r_dof_showdebug // displays DOF parameter debug
r_dof_tweak // Use dvars to set the depth of field effect; overrides r_dof_enable
r_dof_viewModelEnd // Depth of field viewmodel end distance, in inches
r_dof_viewModelStart // Depth of field viewmodel start distance, in inches
r_dpvs_useCellForceInvisibleBits // turns on/off the script-driven cell vis bits
r_drawDebugFogParams // enables the fog debug display
r_drawWater // Enable water rendering
r_effectLimit // Set to 1 to dynamically scale back particles based on the amount onscreen.
r_effectLimitMax // When this many pixels of particle effects are rendered, 100% of new particles will die early. In millions of pixels.
r_effectLimitMin // When up to this many pixels of particle effects are rendered, particles will begin to die early. In millions of pixels.
r_enableDlights // toggle multipass dlights rendering
r_enableFlashlight // Enable Player Flashlight.
r_enableOccluders // Enable occluders
r_enablePlayerShadow // Enable First Person Player Shadow.
r_envMapExponent // Reflection exponent.
r_envMapMaxIntensity // Max reflection intensity based on glancing angle.
r_envMapMinIntensity // Min reflection intensity based on glancing angle.
r_envMapOverride // Min reflection intensity based on glancing angle.
r_envMapSpecular // Enables environment map specular lighting
r_envMapSunIntensity // Max sun specular intensity intensity with env map materials.
r_exposureTweak // enable the exposure dvar tweak
r_exposureValue // exposure
r_extracam_custom_aspectratio // custom extracam aspect ratio (width/height). Set to -1 to use default aspect ratio
r_extracam_shadowmap_enable // enables extra cam shadowmapping
r_filmCurveSoftClip // film curve soft clip point
r_filmLut // Film LUT Index.
r_filmTweakBleach // Tweak dev var; film color Bleach dark - mid - light
r_filmTweakBrightness // Tweak dev var; film color brightness
r_filmTweakColorTemp // Tweak dev var; film color Color Temp dark - mid - light
r_filmTweakContrast // Tweak dev var; film color Contrast dark - mid - light
r_filmTweakDarkFeather // Tweak dev var; film color Dark range feather amount
r_filmTweakDarkTint // Tweak dev var; film color Dark Tint
r_filmTweakDesaturation // Tweak dev var; Desaturation applied after all 3D drawing
r_filmTweakEnable // Tweak dev var; enable film color effects
r_filmTweakHue // Tweak dev var; film color Hue dark - mid - light
r_filmTweakInvert // Tweak dev var; enable inverted video
r_filmTweakLightFeather // Tweak dev var; film color Light range feather amount
r_filmTweakLightTint // Tweak dev var; film color Light Tint
r_filmTweakLut // Tweak Film LUT Index.
r_filmTweakMidEnd // Tweak dev var; film color Mid End
r_filmTweakMidStart // Tweak dev var; film color Mid Start
r_filmTweakMidTint // Tweak dev var; film color Mid Tint
r_filmTweakRangeDebug // Tweak dev var; enable dark - mid - light debug display
r_filmTweakSaturation // Tweak dev var; film color Saturation dark - mid - light
r_filmUseTweaks // Overide film effects with tweak dvar values
r_finalShiftX // r,g,b channel shift x
r_finalShiftY // r,g,b channel shift y
r_flameFX_distortionScaleFactor // Distortion uv scales (Default to 1)
r_flameFX_enable // Enable the flamethrower effect
r_flameFX_fadeDuration // Sets fade duration in seconds
r_flameFX_FPS // fire frames per sec
r_flameFX_magnitude // Distortion magnitude
r_flame_allowed // Allow flame effect.
r_flashLightBobAmount // Flashlight Movement Amount.
r_flashLightBobRate // Flashlight Movement Rate.
r_flashLightBrightness // Brightness scale for flash light.
r_flashLightColor // Flashlight Color.
r_flashLightEndRadius // Radius of the circle at the end of the flash light in inches.
r_flashLightFlickerAmount // Flashlight Flicker Amount.
r_flashLightFlickerRate // Flashlight Flicker Rate (Times per second).
r_flashLightFovInnerFraction // Relative Inner FOV angle for the dynamic flash light. 0 is full fade 0.99 is almost no fade.
r_flashLightOffset // Relative position of the Flashlight.
r_flashLightRange // Distance of the flash light in inches.
r_flashLightShadows // Enable shadows for flash light.
r_flashLightSpecularScale // Flashlight Specular Scale.
r_flashLightStartRadius // Radius of the circle at the start of the flash light in inches.
r_flimCurveBlack // film curve black point
r_flimCurveWhite // film curve white point
r_fog // Set to 0 to disable fog
r_fog_disable // Disables fog
r_forceLod // Force all level of detail to this level
r_fovScaleThresholdRigid // Threshold FOV LOD scaling must pass before taking effect for rigid models
r_fovScaleThresholdSkinned // Threshold FOV LOD scaling must pass before taking effect for skinned models
r_fullbright // Toggles rendering without lighting
r_fullHDRrendering // enable full HDR rendering
r_fullscreen // Display game full screen
r_gamma // Gamma value
r_genericFilter_enable // Enable the genericFilter material
r_grassBurn // test
r_grassEnable // Diables grass movement
r_grassWindForceEnable // Enables wind gusts that affect dynFoliage grass
r_heroLightColorTemp // hero diffuse light temp
r_heroLighting // Enable hero-only lighting
r_heroLightSaturation // hero diffuse light saturation
r_heroLightScale // hero diffuse light scale
r_highLodDist // Distance for high level of detail
r_ignore // used for debugging anything
r_ignorehwgamma // Ignore hardware gamma
r_inGameVideo // Allow in game cinematics
r_lightConflicts // Shows conflicts between primary lights
r_lightGridContrast // Adjust the contrast of light color from the light grid
r_lightGridEnableTweaks // Enable tweaks of the light color from the light grid
r_lightGridIntensity // Adjust the intensity of light color from the light grid
r_lightGridUseTweakedValues // Use tweaked values instead of default
r_lightMap // Replace all lightmaps with pure black or pure white
r_lightTweakAmbient // Ambient light strength
r_lightTweakAmbientColor // Light ambient color
r_lightTweakDiffuseFraction // diffuse light fraction
r_lightTweakSunColor // Sun color
r_lightTweakSunDiffuseColor // Sun diffuse color
r_lightTweakSunDirection // Sun direction in degrees
r_lightTweakSunLight // Sunlight strength
r_lockPvs // Lock the viewpoint used for determining what is visible to the current position and direction
r_lodBiasRigid // Bias the level of detail distance for rigid models (negative increases detail)
r_lodBiasSkinned // Bias the level of detail distance for skinned models (negative increases detail)
r_lodScaleRigid // Scale the level of detail distance for rigid models (larger reduces detail)
r_lodScaleSkinned // Scale the level of detail distance for skinned models (larger reduces detail)
r_logFile // Write all graphics hardware calls for this many frames to a logfile
r_lowestLodDist // Distance for lowest level of detail
r_lowLodDist // Distance for low level of detail
r_lutvar_0 // lut data
r_lutvar_1 // lut data
r_lutvar_10 // lut data
r_lutvar_11 // lut data
r_lutvar_12 // lut data
r_lutvar_13 // lut data
r_lutvar_14 // lut data
r_lutvar_15 // lut data
r_lutvar_2 // lut data
r_lutvar_3 // lut data
r_lutvar_4 // lut data
r_lutvar_5 // lut data
r_lutvar_6 // lut data
r_lutvar_7 // lut data
r_lutvar_8 // lut data
r_lutvar_9 // lut data
r_materialXYZ // material color checker XYZ d65 coords
r_mediumLodDist // Distance for medium level of detail
r_missile_cam_debug_display // Show missile camera debug overlay
r_modelLimit // Maximum number of models drawn simultaneously
r_motionblur_blurOrigin // Tweak dev var; origin of blur
r_motionblur_directionFactor // Tweak dev var; blur magnitude due to direction change
r_motionblur_enable // Enable the motion blur effect
r_motionblur_frameBased_enable // Enable object based motion blur effect
r_motionblur_maxblur // Caps the number of pixels sampled for blur
r_motionblur_numberOfSamples // Tweak dev var; sets the number of pixels sampled
r_motionblur_positionFactor // Tweak dev var; blur magnitude due to position change
r_norefresh // Skips all rendering. Useful for benchmarking.
r_normalMap // Replace all normal maps with a flat normal map
r_num_viewports // number of viewports to expect to render
r_offscreenCasterLodScale // Off-screen shadow casters LOD distance scale
r_outdoorAwayBias // Affects the height map lookup for making sure snow doesn't go indoors
r_outdoorDownBias // Affects the height map lookup for making sure snow doesn't go indoors
r_outdoorFeather // Outdoor z-feathering value
r_pixelShaderGPRReallocation // Number of general purpose registers to the pixel shader
r_poisonFX_blurMax // blur max
r_poisonFX_blurMin // blur min
r_poisonFX_debug_amount // Poison effect amount
r_poisonFX_debug_enable // Enable the poison effect
r_poisonFX_dvisionA // double vision angle
r_poisonFX_dvisionX // amount of double vision x
r_poisonFX_dvisionY // amount of double vision y
r_poisonFX_pulse // pulse rate for distortion
r_poisonFX_warpX // amount of distortion in x
r_poisonFX_warpY // amount of distortion in y
r_polygonOffsetBias // Offset bias for decal polygons; bigger values z-fight less but poke through walls more
r_polygonOffsetScale // Offset scale for decal polygons; bigger values z-fight less but poke through walls more
r_portalBevels // Helps cull geometry by angles of portals that are acute when projected onto the screen, value is the cosine of the angle
r_portalBevelsOnly // Use screen-space bounding box of portals rather than the actual shape of the portal projected onto the screen
r_portalMinClipArea // Don't clip child portals by a parent portal smaller than this fraction of the screen area.
r_portalMinRecurseDepth // Ignore r_portalMinClipArea for portals with fewer than this many parent portals.
r_portalWalkLimit // Stop portal recursion after this many iterations. Useful for debugging portal errors.
r_primaryLightTweakDiffuseStrength // Tweak the diffuse intensity for primary lights
r_primaryLightTweakSpecularStrength // Tweak the specular intensity for primary lights
r_primaryLightUseTweaks // Use primary light intensity tweaks
r_remotescreen_renderlastframe // toggles if remote screen update draws the last frame
r_resampleScene // Upscale the frame buffer with sharpen filter and color correction.
r_reviveFX_debug // Enable the revive effect debug
r_reviveFX_edgeAmount // edge effect amount
r_reviveFX_edgeColorTemp // edge color temp
r_reviveFX_edgeContrast // edge contrast adjust RGB
r_reviveFX_edgeMaskAdjust // edge mask expansion contraction
r_reviveFX_edgeOffset // edge tv style brightness adjust RGB
r_reviveFX_edgeSaturation // edge saturation
r_reviveFX_edgeScale // edge scale (tint) adjust RGB
r_reviveFX_fadeDuration // Sets fade duration in seconds
r_scaleViewport // Scale 3D viewports by this fraction. Use this to see if framerate is pixel shader bound.
r_sCurveEnable // S-Curve On-Off
r_sCurveLinearAngle // S-Curve Linear Angle
r_sCurveLinearStrength // S-Curve Linear Strength
r_sCurveShoulderStrength // S-Curve Shoulder Strength
r_sCurveToeDenominator // S-Curve Toe Denominator
r_sCurveToeNumerator // S-Curve Toe Numerator
r_sCurveToeStrength // S-Curve Toe Strength
r_seethru_decal_enable // Toggles see-through impact holes
r_setFrameBufferAlpha // Sets the rendered pixels' alpha to 255 and the background to 0
r_shader_constant_set_debug_range // How far to draw scs debug view
r_shader_constant_set_enable // enables shader constant sets
r_showFbColorDebug // Show front buffer color debugging information
r_showFloatZDebug // Show float z buffer used to eliminate hard edges on particles near geometry
r_showForcedInvisibleCells // Only draw cells that are forced to be off.
r_showHDRalpha // debug display expensive HDR alphas
r_showLightGrid // Show light grid debugging information
r_showLightingOrigins // Show lighting origins for models
r_showMissingLightGrid // Use rainbow colors for entities that are outside the light grid
r_showOutdoorVolumeDebug // Toggles the display of particle outdoor volume debug
r_showPenetration // Shows materials tagged with 'nopenetrate'
r_showSunDirectionDebug // Toggles the display of sun direction debug
r_singleCell // Only draw things in the same cell as the camera. Most useful for seeing how big the current cell is.
r_skipPvs // Skipt the determination of what is in the potentially visible set (disables most drawing)
r_skyColorTemp // Sky box color temp.
r_skyTransition // Sky transition blend factor.
r_sky_intensity_angle0 // angle0 of sky intensity
r_sky_intensity_angle1 // angle1 of sky intensity
r_sky_intensity_factor0 // angle0 of sky intensity
r_sky_intensity_factor1 // angle1 of sky intensity
r_sky_intensity_showDebugDisplay // Enables sky intensity debugging display
r_sky_intensity_useDebugValues // use dvar values for sky intensity
r_smooth_vsync // Enable smoothing of v-sync.
r_smp_backend // Process renderer back end in a separate thread
r_smp_worker // Process renderer front end in a separate thread
r_smp_worker_thread0 // Enable worker thread
r_smp_worker_thread1 // Enable worker thread
r_specularColorScale // Set greater than 1 to brighten specular highlights
r_specularRoughnessMap // Replace all specular and roughness maps
r_spotLightBrightness // Brightness scale for spot light to get overbrightness from the 0-1 particle color range.
r_spotLightEndRadius // Radius of the circle at the end of the spot light in inches.
r_spotLightEntityShadows // Enable entity shadows for spot lights.
r_spotLightFovInnerFraction // Relative Inner FOV angle for the dynamic spot light. 0 is full fade 0.99 is almost no fade.
r_spotLightShadows // Enable shadows for spot lights.
r_spotLightSModelShadows // Enable static model shadows for spot lights.
r_spotLightStartRadius // Radius of the circle at the start of the spot light in inches.
r_stereo3DAvailable // 3D Mode available
r_stereo3DEyeSeparation // 3D eye separation
r_stereo3DMode // 3D Rendering mode
r_stereo3DOn // 3D on off toggle
r_stereoFocusDepth // 3D eye focus depth
r_stereoGunShift // 3D gun shift
r_stereoTurretShift // 3D turret shift
r_stream // Stream high mip levels (1=world|2=xmodels|4=bmodels)
r_streamClear // Set true to clear all streamed highmip levels
r_streamDebug // Corrupts high mip levels which should not be visible, rather than unloading them.
r_streamFakeLagMsec // Number of msec to add to streaming to roughly fake DVD lag
r_streamFreezeState // Freeze the state of all streaming memory - don't allow streaming or un-streaming of any images.
r_streamFull // Don't let anyone take any of your precious stream buffer. Some people need to debug texture streaming. Steve needs to debug texture streaming.
r_streamHiddenPush // Scale the distance of hidden objects by this amount
r_streamLog // Enable logging of all streaming commands executed - printed to Output and console
r_streamLowDetail // Force lowest detail mips to always be loaded (disable this for more memory in release builds)
r_streamMaxDist // Maximum distance to predictively stream from
r_streamShowList // Show list of streamed textures
r_streamShowStats // Show streaming stats
r_streamSize // Limit size of stream buffer in KB (0 is no limit)
r_streamTaint // Corrupt loaded mips (1-2: solid roygbiv to show mip rendered; 3-5: color coded imageIndex, difference is alpha)
r_sunblind_fadein // time in seconds to fade blind from 0% to 100%
r_sunblind_fadeout // time in seconds to fade blind from 100% to 0%
r_sunblind_max_angle // angle from sun in degrees inside which blinding is max
r_sunblind_max_darken // 0-1 fraction for how black the world is at max blind
r_sunblind_min_angle // angle from sun in degrees outside which blinding is 0
r_sunflare_fadein // time in seconds to fade alpha from 0% to 100%
r_sunflare_fadeout // time in seconds to fade alpha from 100% to 0%
r_sunflare_max_alpha // 0-1 vertex color and alpha of sun at max effect
r_sunflare_max_angle // angle from sun in degrees inside which effect is max
r_sunflare_max_size // largest size of flare effect in pixels at 640x480
r_sunflare_min_angle // angle from sun in degrees outside which effect is 0
r_sunflare_min_size // smallest size of flare effect in pixels at 640x480
r_sunflare_shader "sun_flare"
r_sunglare_fadein // time in seconds to fade glare from 0% to 100%
r_sunglare_fadeout // time in seconds to fade glare from 100% to 0%
r_sunglare_max_angle // angle from sun in degrees inside which glare is minimum
r_sunglare_max_lighten // 0-1 fraction for how white the world is at max glare
r_sunglare_min_angle // angle from sun in degrees inside which glare is maximum
r_sunsprite_shader "sun"
r_sunsprite_size // diameter in pixels at 640x480 and 80 fov
r_sun_from_dvars // Set sun flare values from dvars rather than the level
r_sun_fx_position // Position in degrees of the sun effect
r_superFlare_debug // Enable the superFlare debug occlusion circles
r_superFlare_enable // Enable the superFlare effect
r_swrk_override_characterCharredAmount // overrides the __characterCharredAmount Shaderworks tweak
r_swrk_override_characterDissolveColor // overrides the __characterDissolveColor Shaderworks tweak
r_swrk_override_enable // Enable shaderworks overrides
r_swrk_override_wetness // Overrides the character wetness.
r_tension_enable // Toggles tension
r_testScale // Specular Scale.
r_texFilterAnisoMax // Maximum anisotropy to use for texture filtering
r_texFilterAnisoMin // Minimum anisotropy to use for texture filtering (overridden by max)
r_texFilterDisable // Disables all texture filtering (uses nearest only.)
r_texFilterMipBias // Change the mipmap bias
r_texFilterMipMode // Forces all mipmaps to use a particular blend between levels (or disables mipping.)
r_texMipFading // Fades in mipmaps instead of popping. On by default. Dvar ignored in ship (always on)
r_textureMode "bilinear"
r_treeScale // Envmap Scale.
r_ui3d_debug_display // Show UI3D debug overlay
r_ui3d_h // ui3d texture window height
r_ui3d_use_debug_values // Use UI debug values
r_ui3d_w // ui3d texture window width
r_ui3d_x // ui3d texture window x
r_ui3d_y // ui3d texture window y
r_use_separate_char_tech // enables the optimization of a separate charred material tech
r_vc_makelog // Enable logging of light grid points for the vis cache. 1 starts from scratch, 2 appends.
r_vc_showlog // Show this many rows of light grid points for the vis cache
r_videoOutputChanged // The video output config has changed
r_vsync // Enable v-sync before drawing the next frame to avoid 'tearing' artifacts.
r_waterFogTest // Enable Water Fog Test.
r_waterSheetingFX_allowed // Enable the water sheeting effect
r_waterSheetingFX_distortionScaleFactor // Distortion uv scales (Default to 1)
r_waterSheetingFX_enable // Enable the water sheeting effect
r_waterSheetingFX_fadeDuration // Sets fade duration in seconds
r_waterSheetingFX_magnitude // Distortion magnitude
r_waterSheetingFX_radius // Tweak dev var; Glow radius in pixels at 640x480
r_watersim_curlAmount // Amount of curl applied
r_watersim_curlMax // Maximum curl limit
r_watersim_curlReduce // Amount curl gets reduced by when over limit
r_watersim_debug // Enables bullet debug markers
r_watersim_enabled // Enables dynamic water simulation
r_watersim_flatten // Flattens the water surface out
r_watersim_foamAppear // Rate foam appears at
r_watersim_foamDisappear // Rate foam disappears at
r_watersim_minShoreHeight // Allows water to lap over the shoreline edge
r_watersim_particleGravity // Particle gravity
r_watersim_particleLength // Length of each particle
r_watersim_particleLimit // Limit at which particles get spawned
r_watersim_particleWidth // Width of each particle
r_watersim_scroll // XY coords to scroll water in
r_watersim_waveSeedDelay // Time between seeding a new wave (ms)
r_watersim_windAmount // Amount of wind applied
r_watersim_windDir // Wind direction (degrees)
r_watersim_windMax // Maximum wind limit
r_waterWaveAmplitude // water wave amplitude
r_waterWaveAngle // water wave angle
r_waterWavePhase // water wave phase
r_waterWaveSpeed // water wave speed
r_waterWaveSteepness // water wave steepness
r_waterWaveWavelength // water wave wavelength
r_worldLod // Set to zero to force world lods to highest
r_zfar // Change the distance at which culling fog reaches 100% opacity; 0 is off
r_znear // Things closer than this aren't drawn. Reducing this increases z-fighting in the distance.
r_znear_depthhack // Viewmodel near clip plane
safeAreaTweakable_horizontal // User-adjustable horizontal safe area as a fraction of the screen width
safeAreaTweakable_vertical // User-adjustable vertical safe area as a fraction of the screen height
safeArea_horizontal // Horizontal safe area as a fraction of the screen width
safeArea_vertical // Vertical safe area as a fraction of the screen height
script_debugger_smoke_test // perform script debugger smoke test and exit
scr_allies "marines"
scr_allowannouncer "1"
scr_allowbattlechatter "1"
scr_allow_killstreak_building "0"
scr_attack_dog_count_zm "3"
scr_attack_dog_health_zm "100000"
scr_attack_dog_kills_zm "25"
scr_attack_dog_max_at_once_zm "3"
scr_attack_dog_time_zm "45"
scr_axis "ussr"
scr_bomb_accel_time ".75"
scr_bomb_explode_delay "1.5"
scr_bomb_time "1.5"
scr_cam_move_time "2.5"
scr_cp_pointsperkill "100"
scr_ctf_enemycarriervisible "0"
scr_ctf_flagrespawntime "0"
scr_ctf_globalbattlechatterprobability "0"
scr_ctf_idleflagreturntime "30"
scr_ctf_numlives "0"
scr_ctf_playerrespawndelay "0"
scr_ctf_roundlimit "3"
scr_ctf_roundswitch "1"
scr_ctf_scorelimit "3"
scr_ctf_timelimit "5"
scr_ctf_touchreturn "1"
scr_ctf_waverespawndelay "15"
scr_custom_score_assist "-1"
scr_deleteexplosivesonspawn "1"
scr_dem_bombtimer "45"
scr_dem_defusetime "5"
scr_dem_extratime "3"
scr_dem_globalbattlechatterprobability "0"
scr_dem_numlives "0"
scr_dem_planttime "5"
scr_dem_roundlimit "0"
scr_dem_roundswitch "1"
scr_dem_scorelimit "2"
scr_dem_timelimit "2.5"
scr_dial_rotate_time "0.5"
scr_disable_air_death_ragdoll "0"
scr_disable_attachments "0"
scr_disable_cac "0"
scr_disable_contracts "0"
scr_disable_equipment "0"
scr_disable_tacinsert "0"
scr_disable_weapondrop "0"
scr_dm_bonus_leader "0"
scr_dm_globalbattlechatterprobability "10000"
scr_dm_numlives "0"
scr_dm_playerrespawndelay "0"
scr_dm_roundlimit "1"
scr_dm_scorelimit "1500"
scr_dm_score_assist "0"
scr_dm_score_death "0"
scr_dm_score_headshot "0"
scr_dm_score_kill "50"
scr_dm_score_suicide "0"
scr_dm_timelimit "100"
scr_dm_waverespawndelay "0"
scr_dog_count "1000"
scr_dog_health "10000"
scr_dog_max_at_once "1000"
scr_dog_time "1000"
scr_dom_flagcapturetime "100"
scr_dom_globalbattlechatterprobability "0"
scr_dom_numlives "0"
scr_dom_playerrespawndelay "0"
scr_dom_roundlimit "1"
scr_dom_scorelimit "200"
scr_dom_timelimit "0"
scr_dom_waverespawndelay "0"
scr_drawfriend "0"
scr_fog_baseheight "-475.268"
scr_fog_blue "0.9624"
scr_fog_exp_halfheight "243.735"
scr_fog_exp_halfplane "3759.28"
scr_fog_green "0.962521"
scr_fog_nearplane "601.593"
scr_fog_red "0.806694"
scr_fx_tabun_radius0 "55"
scr_fx_tabun_radius1 "55"
scr_fx_tabun_radius2 "50"
scr_fx_tabun_radius3 "25"
scr_game_allowfinalkillcam "1"
scr_game_allowkillcam "1"
scr_game_arcadescoring "0"
scr_game_bulletdamage "1.0"
scr_game_deathpointloss "0"
scr_game_difficulty "1"
scr_game_forceradar "0"
scr_game_graceperiod "15"
scr_game_hardpoints "1"
scr_game_killstreaks "1"
scr_game_medalsenabled "1"
scr_game_onlyheadshots "0"
scr_game_perks "1"
scr_game_pinups "0"
scr_game_prematchperiod "15"
scr_game_rankenabled "1"
scr_game_spectatetype "1"
scr_game_suicidepointloss "0"
scr_glass_break_delay "0.5"
scr_guidedMissileMaxHeight "4000"
scr_hardcore "0"
scr_hardpoint_airstrikecount "3"
scr_hardpoint_allowairstrike "1"
scr_hardpoint_allowartillery "1"
scr_hardpoint_allowauto_turret "1"
scr_hardpoint_allowbomber "1"
scr_hardpoint_allowcounteruav "1"
scr_hardpoint_allowdogs "1"
scr_hardpoint_allowhelicopter "1"
scr_hardpoint_allowhelicopter_comlink "1"
scr_hardpoint_allowhelicopter_gunner "1"
scr_hardpoint_allowhelicopter_player "1"
scr_hardpoint_allowhelicopter_player_firstperson "1"
scr_hardpoint_allowhelicopter_x2 "1"
scr_hardpoint_allowmortar "1"
scr_hardpoint_allownapalm "1"
scr_hardpoint_allowradar "1"
scr_hardpoint_allowradardirection "1"
scr_hardpoint_allowradartime "1"
scr_hardpoint_allowradarupdate "1"
scr_hardpoint_allowrcbomb "1"
scr_hardpoint_allowsupply "1"
scr_hardpoint_allowuav "1"
scr_hardpoint_artilleryCanonCount "3"
scr_hardpoint_artilleryCanonShellCount "5"
scr_hardpoint_mortarCanonCount "3"
scr_hardpoint_mortarCanonShellCount "2"
scr_helicopterTurretMaxAngle "35"
scr_heli_armor "500"
scr_heli_armored_maxhealth "1500"
scr_heli_armor_bulletdamage "0.3"
scr_heli_attract_range "20000"
scr_heli_attract_strength "1000"
scr_heli_debug "0"
scr_heli_debug_crash "0"
scr_heli_dest_wait "8"
scr_heli_health_degrade "0"
scr_heli_loopmax "2"
scr_heli_maxhealth "1500"
scr_heli_missile_friendlycare "512"
scr_heli_missile_max "20"
scr_heli_missile_range "100000"
scr_heli_missile_regen_time "100"
scr_heli_missile_reload_time "5.0"
scr_heli_missile_rof "2"
scr_heli_missile_target_cone "0.6"
scr_heli_missile_valid_target_cone "0.7"
scr_heli_protect_pos_time "12"
scr_heli_protect_radius "2000"
scr_heli_protect_time "1000"
scr_heli_targeting_delay "0.5"
scr_heli_target_recognition "0.5"
scr_heli_target_spawnprotection "5"
scr_heli_turretClipSize "20"
scr_heli_turretReloadTime "1.5"
scr_heli_turret_angle_tan "1"
scr_heli_turret_spinup_delay "0.75"
scr_heli_turret_target_cone "0.6"
scr_heli_visual_range "3500"
scr_heli_warning_distance "500"
scr_killstreak_stacking "0"
scr_koth_globalbattlechatterprobability "0"
scr_koth_numlives "0"
scr_koth_playerrespawndelay "0"
scr_koth_roundlimit "1"
scr_koth_roundswitch "1"
scr_koth_scorelimit "250"
scr_koth_timelimit "15"
scr_koth_waverespawndelay "0"
scr_laststand_keep_weapons "0"
scr_mapsize "64"
scr_max_rank "0"
scr_min_prestige "0"
scr_motd
scr_numLives "0"
scr_objectiveText "OBJECTIVES_TDM_HINT"
scr_oldschool "0"
scr_player_allowrevive "1"
scr_player_forcerespawn "1"
scr_player_healthregentime "5"
scr_player_maxhealth "10000"
scr_player_numlives "0"
scr_player_respawndelay "0"
scr_player_sprinttime "1000"
scr_player_suicidespawndelay "0"
scr_poisonDamage "13"
scr_poisonDamageHardcore "5"
scr_poisonDuration "8"
scr_rcbomb_car_size "1"
scr_rcbomb_fadeIn_delay "0.25"
scr_rcbomb_fadeIn_timeBlack "0.5"
scr_rcbomb_fadeIn_timeIn "0.5"
scr_rcbomb_fadeIn_timeOut "0.5"
scr_rcbomb_fadeOut_delay "0.5"
scr_rcbomb_fadeOut_timeBlack "0.25"
scr_rcbomb_fadeOut_timeIn "0.5"
scr_rcbomb_fadeOut_timeOut "0.5"
scr_rcbomb_notimeout "0"
scr_RequiredMapAspectratio "1"
scr_rocket_event "percent"
scr_rocket_event_off "0"
scr_rocket_event_trigger1 "50"
scr_rotating_objects_secs "12"
scr_sab_bombtimer "30"
scr_sab_defusetime "5"
scr_sab_globalbattlechatterprobability "0"
scr_sab_hotpotato "0"
scr_sab_numlives "0"
scr_sab_planttime "2.5"
scr_sab_playerrespawndelay "7.5"
scr_sab_roundlimit "1"
scr_sab_roundswitch "1"
scr_sab_scorelimit "1"
scr_sab_timelimit "100"
scr_sab_waverespawndelay "0"
scr_script_based_influencer_system "0"
scr_sd_bombtimer "45"
scr_sd_defusetime "5"
scr_sd_game_spectatetype "3"
scr_sd_globalbattlechatterprobability "0"
scr_sd_multibomb "0"
scr_sd_numlives "1"
scr_sd_planttime "5"
scr_sd_playerrespawndelay "0"
scr_sd_roundlimit "0"
scr_sd_roundswitch "3"
scr_sd_scorelimit "1000"
scr_sd_timelimit "2.5"
scr_sd_waverespawndelay "0"
scr_selecting_location
scr_showperksonspawn "1"
scr_sideBetTimer "0"
scr_spawn_artillery_influencer_radius "1200"
scr_spawn_artillery_influencer_score "-600"
scr_spawn_artillery_influencer_score_curve "linear"
scr_spawn_auto_turret_influencer_radius "1200"
scr_spawn_auto_turret_influencer_score "-650"
scr_spawn_auto_turret_influencer_score_curve "linear"
scr_spawn_dead_friend_influencer_count "7"
scr_spawn_dead_friend_influencer_radius "1300"
scr_spawn_dead_friend_influencer_score "-100"
scr_spawn_dead_friend_influencer_score_curve "steep"
scr_spawn_dead_friend_influencer_timeout_seconds "8"
scr_spawn_dog_influencer_radius "1050"
scr_spawn_dog_influencer_score "-150"
scr_spawn_dog_influencer_score_curve "steep"
scr_spawn_enemyavoiddist "800"
scr_spawn_enemyavoidweight "0"
scr_spawn_enemy_influencer_radius "1600"
scr_spawn_enemy_influencer_score "-150"
scr_spawn_enemy_influencer_score_curve "steep"
scr_spawn_force_unified "0"
scr_spawn_friend_weak_influencer_radius "700"
scr_spawn_friend_weak_influencer_score "25"
scr_spawn_friend_weak_influencer_score_curve "steep"
scr_spawn_grenade_endpoint_influencer_radius "560"
scr_spawn_grenade_endpoint_influencer_score "-300"
scr_spawn_grenade_endpoint_influencer_score_curve "linear"
scr_spawn_grenade_influencer_radius "560"
scr_spawn_grenade_influencer_score "-300"
scr_spawn_grenade_influencer_score_curve "linear"
scr_spawn_helicopter_influencer_length "3500"
scr_spawn_helicopter_influencer_radius "2000"
scr_spawn_helicopter_influencer_score "-500"
scr_spawn_helicopter_influencer_score_curve "linear"
scr_spawn_napalm_influencer_radius "3500"
scr_spawn_napalm_influencer_score "-500"
scr_spawn_napalm_influencer_score_curve "steep"
scr_spawn_objective_facing_bonus "50"
scr_spawn_randomness_range "100"
scr_spawn_rcbomb_influencer_radius "1750"
scr_spawn_rcbomb_influencer_score "-200"
scr_spawn_rcbomb_influencer_score_curve "steep"
scr_spawn_tvmissile_influencer_length "3000"
scr_spawn_tvmissile_influencer_radius "2000"
scr_spawn_tvmissile_influencer_score "-400"
scr_spawn_tvmissile_influencer_score_curve "linear"
scr_spawn_vehicle_influencer_lead_seconds "3"
scr_spawn_vehicle_influencer_score "-50"
scr_spawn_vehicle_influencer_score_curve "linear"
scr_tabunGasDuration "8"
scr_tabunInitialGasShockDuration "7"
scr_tabunWalkInGasShockDuration "4"
scr_tabun_effect_radius "185"
scr_tabun_shock_height "20"
scr_tabun_shock_radius "185"
scr_tdm_bonus_leader "0"
scr_tdm_globalbattlechatterprobability "0"
scr_tdm_grenadeLauncherDudTime "100"
scr_tdm_killstreakDelayTime "0"
scr_tdm_numlives "0"
scr_tdm_playerrespawndelay "0"
scr_tdm_roundlimit "1"
scr_tdm_roundwinlimit "0"
scr_tdm_scorelimit "30000"
scr_tdm_score_assist "50"
scr_tdm_score_death "0"
scr_tdm_score_headshot "0"
scr_tdm_score_kill "10000"
scr_tdm_score_suicide "0"
scr_tdm_thrownGrenadeDudTime "0"
scr_tdm_timelimit "0"
scr_tdm_waverespawndelay "0"
scr_teambalance "0"
scr_teamKillPunishCount "3"
scr_team_allowHardpointStreakAfterDeath "0"
scr_team_artilleryTeamKillPenalty "0.25"
scr_team_fftype // Friendly fire status
scr_team_kickteamkillers "0"
scr_team_mortarTeaTeamKillPenalty "0.25"
scr_team_respawntime "0"
scr_team_teamkillerplaylistbanpenalty "0"
scr_team_teamkillerplaylistbanquantum "0"
scr_team_teamkillpointloss "1"
scr_team_teamkillspawndelay "20"
scr_timeplayedcap "1800"
scr_twar_globalbattlechatterprobability "0"
scr_twar_timelimit "100"
scr_vehicles_enabled "1"
scr_vehicle_damage_scalar "1"
scr_veh_alive_cleanuptimemax "120"
scr_veh_alive_cleanuptimemin "119"
scr_veh_cleanupabandoned "1"
scr_veh_cleanupdebugprint "0"
scr_veh_cleanupdrifted "1"
scr_veh_cleanupmaxspeedmph "1"
scr_veh_cleanupmindistancefeet "75"
scr_veh_cleanuptime_dmgfactor_deadtread "0.25"
scr_veh_cleanuptime_dmgfactor_max "1.0"
scr_veh_cleanuptime_dmgfactor_min "0.33"
scr_veh_cleanuptime_dmgfraction_curve_begin "0.0"
scr_veh_cleanuptime_dmgfraction_curve_end "1.0"
scr_veh_dead_cleanuptimemax "30"
scr_veh_dead_cleanuptimemin "20"
scr_veh_disableoverturndamage "0"
scr_veh_disablerespawn "0"
scr_veh_disappear_maxpreventdistancefeet "30"
scr_veh_disappear_maxpreventvisibilityfeet "150"
scr_veh_disappear_maxwaittime "60"
scr_veh_driversarehidden "1"
scr_veh_driversareinvulnerable "1"
scr_veh_explode_on_cleanup "1"
scr_veh_explosion_doradiusdamage "1"
scr_veh_explosion_husk_forcepointvariance "30"
scr_veh_explosion_husk_horzvelocityvariance "25"
scr_veh_explosion_husk_vertvelocitymax "200"
scr_veh_explosion_husk_vertvelocitymin "100"
scr_veh_explosion_maxdamage "200"
scr_veh_explosion_mindamage "20"
scr_veh_explosion_radius "256"
scr_veh_explosion_spawnfx "1"
scr_veh_health_jeep "700"
scr_veh_health_tank "1350"
scr_veh_ondeath_createhusk "1"
scr_veh_ondeath_usevehicleashusk "1"
scr_veh_respawnafterhuskcleanup "1"
scr_veh_respawntimemax "90"
scr_veh_respawntimemin "50"
scr_veh_respawnwait_iterationwaitseconds "1"
scr_veh_respawnwait_maxiterations "30"
scr_veh_waittillstoppedandmindist_maxtime "10"
scr_veh_waittillstoppedandmindist_maxtimeenabledistfeet "5"
scr_wagerBet "10000"
scr_wagerPool "0"
scr_wagerSideBet "0"
scr_wager_defaultScore "0"
scr_wager_firstPayout "0"
scr_wager_firstPlayer "0"
scr_wager_secondPayout "0"
scr_wager_secondPlayer "0"
scr_wager_thirdPayout "0"
scr_wager_thirdPlayer "0"
scr_weaponobject_coneangle "70"
scr_weaponobject_graceperiod "0.6"
scr_weaponobject_mindist "20"
scr_weaponobject_radius "192"
scr_weapon_allowbetty "1"
scr_weapon_allowc4 "1"
scr_weapon_allowflash "1"
scr_weapon_allowfrags "1"
scr_weapon_allowmines "1"
scr_weapon_allowrpgs "1"
scr_weapon_allowsatchel "1"
scr_weapon_allowsmoke "1"
scr_xpscale "1"
scr_xpzmscale "1"
selectedFriendClanTag
selectedFriendIndex // Currently selected friend index.
selectedFriendName
selectedGroupIndex // Currently selected group index
selectedMenuItemIndex // Current selected event index.
selectedPlayerClanName
selectedPlayerXuid
selectedStoreItemIndex // Currently selected in-game store item index
selected_group "killstreak"
sensitivity // Mouse sensitivity
server1
server10
server11
server12
server13
server14
server15
server16
server2
server3
server4
server5
server6
server7
server8
server9
sessionSearchMaxAttempts // Number of search retries before giving up.
session_nonblocking // Experimental non-blocking Session code
settings_map_selected "1"
shardEdgeSize // Range of the new shard edge length as a fraction of the total shard edges lengths
shardShatterSizeLimitScale // Scale of maxShardSize & minShardSize when shattering a shard.
shardSplitDir // Angle range of the first edge of the shard
shardSplitDir2 // Angle range of the next edges of the shard
shatterFxMaxDist // Distance between FX spawning points along the window edges
shatterFxMinEdgeLength // Minimum length that the window edge has to be to have a shatter fx spawned on it.
shortversion "7"
showdrop // Show dropped packets
showHiddenOffers // True when hidden offers need to be displayed for a user
showpackets // Show packets
showVisionSetDebugInfo // Enables visionset debug info
show_reticle_during_swimming // Controls if the reticle is visible during swimming.
show_tty_timestamps // Show timestamps in tty output
sidebet_made
skills // SP character skill levels
smpDraw2D // draw 2D in a worker thread
smpGlass // Update & generate glass verts in a worker thread
smpUpdatePlayerNames // update player names in a worker thread (part of Draw2D)
sm_enable // Enable shadow mapping
sm_fastSunShadow // Fast sun shadow
sm_fullResSpotShadowEnable // Provides high-res spot shadows for the only one spotlight in the scene.
sm_lightScore_eyeProjectDist // When picking shadows for primary lights, measure distance from a point this far in front of the camera.
sm_lightScore_spotProjectFrac // When picking shadows for primary lights, measure distance to a point this fraction of the light's radius along it's shadow direction.
sm_maxLights // Limits how many primary lights can have shadow maps
sm_polygonOffsetBias // Shadow map offset bias
sm_polygonOffsetScale // Shadow map offset scale
sm_qualitySpotShadow // Fast spot shadow
sm_spotEnable // Enable spot shadow mapping from script
sm_spotShadowFadeTime // How many seconds it takes for a primary light shadow map to fade in or out
sm_spotShadowLargeRadiusScale // Radius scaler for large spot shadow switch over
sm_strictCull // Strict shadow map cull
sm_sunAlwaysCastsShadow // forces sun to always do shadow mapping, from script
sm_sunEnable // Enable sun shadow mapping from script
sm_sunSampleSizeNear // Shadow sample size
sm_sunShadowCenter // Sun shadow center, 0 0 0 means don't override
sm_sunShadowScale // Sun shadow scale optimization
sm_sunShadowSmallEnable // use quarter resolution sun shadow map
snaps // Snapshot rate
snd_always_log // enable missing sound spam
snd_assert_on_enqueue
snd_assert_on_play
snd_assert_on_stop
snd_autoSim // turn on client side simulation of automatic gun sounds
snd_autosim_window // autosim window masking
snd_auto_random // amt to randomize 3p apparent fire rates
snd_boat_current_rpm // scalar value for boat engine
snd_boat_engine_off // value for boat engine low/idle
snd_boat_lerp_rpm // scalar value for boat rpm
snd_boat_pitch_high_max // boat pitch high max
snd_boat_pitch_high_min // boat pitch high min
snd_boat_pitch_idle_max // boat pitch low min
snd_boat_pitch_idle_min // boat pitch low min
snd_boat_pitch_low_max // boat pitch low min
snd_boat_pitch_low_min // boat pitch low min
snd_boat_pitch_med_max // boat pitch med max
snd_boat_pitch_med_min // boat pitch med min
snd_boat_rpm_high_fin_end // rpm point where engine_high fade in begins
snd_boat_rpm_high_start // rpm point where engine_high start
snd_boat_rpm_idle_end // rpm point where engine_idle ends
snd_boat_rpm_idle_fout_start // rpm point where engine_idle begins to fade out
snd_boat_rpm_low_end // rpm point where engine_low ends
snd_boat_rpm_low_fin_end // rpm point where engine_low fade in ends
snd_boat_rpm_low_fout_start // rpm point where engine_low fade out begins
snd_boat_rpm_low_start // rpm point where engine_low start
snd_boat_rpm_med_end // rpm point where engine_medium ends
snd_boat_rpm_med_fin_end // rpm point where engine_med fade in ends
snd_boat_rpm_med_fout_start // rpm point where engine_med fade out begins
snd_boat_rpm_med_start // rpm point where engine_medium start
snd_boat_rpm_scalar // scalar value for boat rpm
snd_boat_using_lerp_rpm // scalar value for boat rpm
snd_boat_water_fast_min // boat pitch high max
snd_boat_water_idle_max // boat pitch high max
snd_boat_water_pitch_max // boat pitch high max
snd_boat_water_slow_max // boat pitch high max
snd_boat_water_slow_min // boat pitch high max
snd_debugAlias
snd_debugReplace // Print out information about when we stop a playing sound to play another
snd_debug_snapshot
snd_dlpf_attenuation // attenuation for distance lpf
snd_dlpf_max_distance // max distance for distance lpf
snd_dlpf_min_distance // min distance for distance lpf
snd_dopplerRate // global doppler lerp rate
snd_dopplerScale // global doppler ratio
snd_draw3D // Draw the position and info of world sounds
snd_drawInfo // Draw debugging information for sounds
snd_drawSort // Sort debugging information for sounds
snd_dry_scale // scalar value for dry signal path
snd_dsp_drc // enable DRC
snd_dsp_drc_ratio // ratio for master limiter
snd_dsp_drc_threshold // threshold for master limiter
snd_dsp_futz // enable dsp futz
snd_enable_pitch // use pitch variation
snd_entityRandomize // entity randomization
snd_flux_separation // separation of L/R flux elements, 0 none, 1 180 deg, not linear in angle
snd_futz // futz
snd_futz_blend
snd_futz_bpf_f
snd_futz_bpf_q
snd_futz_clip_post
snd_futz_clip_pre
snd_futz_distortion
snd_futz_force
snd_futz_ls_f
snd_futz_ls_g
snd_futz_ls_q
snd_futz_min // futz min
snd_futz_postg
snd_futz_preg
snd_futz_tg
snd_futz_th
snd_global_pitch // global pitch
snd_hdr // HDR audio
snd_hdr_channel_threshold // percent of channels active when hdr kicks in
snd_hdr_maximum_priority // sounds more than this are at normal volume
snd_hdr_minimum_level // hdr minimum attenuation
snd_hdr_minimum_priority // sounds less than this are silent
snd_hdr_rate // hdr lerp rate
snd_isbig_distance // distance where isbig doesn't make a difference in occlusion
snd_levelFadeTime // The amount of time in milliseconds for all audio to fade in at the start of a level
snd_losOcclusion // occlusion based off of LOS
snd_master_override
snd_menu_center_channel // options menu center channel
snd_menu_cinematic // Scales the volume of Bink videos.
snd_menu_left_channel // options menu left channel
snd_menu_left_surround // options menu left surround
snd_menu_lfe // options menu lfe
snd_menu_listen_level // options menu listening level
snd_menu_master // options menu master
snd_menu_music // options menu music
snd_menu_right_channel // options menu right channel
snd_menu_right_surround // options menu right surround
snd_menu_sfx // options menu sfx
snd_menu_speaker_setup // options menu speaker setup
snd_menu_voice // options menu voice
snd_minigun_loop_start // spin time elapse until loop sound starts playing
snd_minigun_pitch_end // pitch where the loop ends
snd_minigun_pitch_start // pitch where the loop starts
snd_mute_alias_substring
snd_occlusion_attenuation // maximum occlusion attenuation
snd_occlusion_cull_distance // distance at which we don't do occlusion at start
snd_occlusion_rate // snd occlusion rate
snd_omnidirectionalPercentage // Percentage of sound volume that is 'directionless'
snd_pan_filter
snd_pitch_timescale // pitch scalar by timescale
snd_playing_priority_boost // priority penalty for new sounds
snd_priority_rate // interpolation rate for minimum priority
snd_priority_window // width of priority window for sounds to play
snd_proximity_enable // enable reverb prox
snd_proximity_filter
snd_proximity_max_dist
snd_proximity_max_late_cut
snd_proximity_min_dist
snd_ps3_vol_occlusion_attenuation_dry // maximum dry volume occlusion attenuation for PS3
snd_ps3_vol_occlusion_attenuation_wet // maximum wet volume occlusion attenuation for PS3
snd_radverb_matrix // radverb delay matrix selection
snd_realDelay // turn on 'realistic' sound delay
snd_reverb_override
snd_reverb_proximity_distance // max dist for reverb proximity effect
snd_skip_muted_sounds // skip muted sounds
snd_slaveFadeInTime // the time in seconds for slave fade in
snd_slaveFadeOutTime // the time in seconds for slave fade out
snd_solo_alias_substring
snd_speakerConfiguration // Speaker configuration
snd_start_alias
snd_stereo_3d // pan 3d stereo assets to alternate speakers
snd_stop_alias
snd_test_verb // test verb wetdry
snd_throttle_reduce_vol // ammount to reduce engine vol
snd_throttle_time_held_down // how long (ms) throttle is held before engine vol begins to decrease
snd_timescale_filter // filter coef for timescale fade
snd_touchStreamFilesOnLoad // Check whether stream sound files exist while loading
snd_trace_master // trace master dsp
snd_trace_reverb // trace reverb dsp
snd_trace_voice // trace voice dsp
snd_water_occlusion_attenuation // in water attenuation
snd_water_occlusion_distance // max distance from surface for water occlusion
snd_water_occlusion_minimum // min distance from surface for water occlusion
snd_water_omni_amount // omni amount at max distance underwater
snd_water_omni_distance // max distance for undewater omni
snd_water_pitch_amount // pitch amount at max distance underwater
snd_water_pitch_distance // max distance for underwater pitch changes
snd_wet_scale // scalar value for wet signal path
spawnsystem_badspawn_aggression_delay // Report aggression to others that a player deals within this MS of spawning in
spawnsystem_badspawn_damage_delay // Report damage that occurs to a player within this MS of spawning in
spawnsystem_badspawn_force_record // Immediately after each client spawn, submit a corresponding badspawn report
spawnsystem_debug // Debug and rendering for the spawn system
spawnsystem_debug_archive // Sets the spawn system archive mode
spawnsystem_debug_best_points // Render best spawn point information
spawnsystem_debug_influencers // Use colors to differentiate influencer types
spawnsystem_debug_influencer_types // Render spawn influencer information
spawnsystem_debug_liveedit // Do it, live edit now!
spawnsystem_debug_player
spawnsystem_debug_points // Render spawn point boxes. 2 = no depth test
spawnsystem_debug_point_weights // Render spawn point information
spawnsystem_debug_showclients // Render archived clients
spawnsystem_debug_sideswitched // Switch to "sideswitched" mode
spawnsystem_debug_team
spawnsystem_debug_visibility // Render spawn point visibility checking
spawnsystem_debug_visibility_time // Length of time to render the visibility check
spawnsystem_friend_influencer_stacking // Combine all friendly player influencers
spawnsystem_sight_check_max_distance // Max distance for the line of sight check
spawnsystem_weapon_influencer_min_length // Minimum lenght the line of sight check will drop the distance to
spawnsystem_weapon_influencer_push_through // Extend the line of sight distance this much after check
spawnsystem_weapon_influencer_sight_check // Do a line of sight check on the weapon influencer
spawnsystem_weapon_influencer_update_interval // How often to update the sight check in milliseconds
splitscreen // Current game is a splitscreen game
splitscreen_botCount // The number of bots allowed in a splitscreen game
splitscreen_lobbyPlayerCount "2/2 PLAYERS"
splitscreen_partyPlayerCount "2 player(s) in party."
splitscreen_playerCount // The number of players in a splitscreen game
splitscreen_playerNum "4"
spmode // Current game is a sp game
start_in_mp // Start in Mp on launch
stats_version_check // Reset stats if version numbers do not match
stat_version // Stats version number
stopspeed // The player deceleration
storeMapPackMaskToStats // Store the installed Map-Pack Masks in the persistent stats
sv_allowedClan1
sv_allowedClan2
sv_assistWorkers // Enable server worker thread assist when idle
sv_botCloseDistance // Bot enemy close distance. Used for threat selection
sv_botCrouchDistance // If the path lookahead distance is less than this number, the bot will crouch
sv_botFov // Bot field of view angle in degrees
sv_botGoalRadius // Bot goal radius
sv_botMaxAdsTime // The maximum amount of time in ms the bot will remain in ADS. Used to prevent repeatedly popping in and out of ads.
sv_botMaxCrouchTime // The maximum amount of time in ms the bot will hold his crouch stance
sv_botMaxDeathTime // The maximum amount of time in ms the bot will hold his position while his target is dead
sv_botMaxFireTime // When firing a non-automatic weapon, the maximum amount of time the bot will delay before firing again. Used to simulate the time to depress and press the controller attack trigger.
sv_botMaxPitchTime // The maximum amount of time in ms the bot will hold his current pitch on the target when engaged
sv_botMaxReactionTime // Bot maximum time to react when first seeing a target
sv_botMaxStrafeTime // Bot maximum time to strafe when engaged
sv_botMinAdsTime // The minimum amount of time in ms the bot will remain in ADS. Used to prevent repeatedly popping in and out of ads.
sv_botMinCrouchTime // The minimum amount of time in ms the bot will hold his crouch stance
sv_botMinDeathTime // The minimum amount of time in ms the bot will hold his position while his target is dead
sv_botMinFireTime // When firing a non-automatic weapon, the minimum amount of time the bot will delay before firing again. Used to simulate the time to depress and press the controller attack trigger.
sv_botMinPitchTime // The minimum amount of time in ms the bot will hold his current pitch on the target when engaged
sv_botMinReactionTime // Bot minimum time to react when first seeing a target
sv_botMinStrafeTime // Bot minimum time to strafe when engaged
sv_botPitchDown // Bot pitch minimum (looking downward)
sv_botPitchSpeed // Bot pitch lerp speed
sv_botPitchSpeedAds // Bot pitch lerp speed used when engaging
sv_botPitchUp // Bot pitch maximum (looking upward)
sv_botSprintDistance // If the path lookahead distance is this number or greater, the bot will sprint
sv_botStrafeChance // The percentage chance that the bot will strafe when engaged
sv_botTargetLeadBias // The number of server frames used to predict an entity's position. Used for bot aiming when firing.
sv_botUseFriendNames // Testclients will use names from the players' friends list
sv_botYawSpeed // Bot yaw rate for normal turning
sv_botYawSpeedAds // Bot yaw rate for slower (fine tuning) turning
sv_cheats // Allow server side cheats
sv_clientArchive // Have the clients archive data to save bandwidth on the server
sv_clientside // Used to toggle systems in script on and off on the server.
sv_clientSideBullets // If true, clients will synthesize tracers and bullet impacts
sv_clientSideVehicles // If true, vehicles will be predicted on the client reducing response time
sv_connectTimeout // seconds without any message when a client is loading
sv_debugRate // Enable snapshot rate debugging info
sv_debugReliableCmds // Enable debugging information for 'reliable' commands
sv_endGameIfISuck // End the match if most of the players are lagged out
sv_floodProtect // Prevent malicious lagging by flooding the server with commands
sv_fps // Server frames per second
sv_hostname "Anth0ny"
sv_kickBanTime // Time in seconds for a player to be banned from the server after being kicked
sv_mapname
sv_mapRotation
sv_mapRotationCurrent
sv_maxclients "24"
sv_maxHappyPingTime // Max ping that a player can have that we consider acceptable when calculating if the server is swamped
sv_maxPing // Maximum ping allowed on the server
sv_maxRate // Maximum bit rate
sv_minPing // Minimum ping allowed on the server
sv_network_fps // Number of times per second the server checks for net messages
sv_network_warning // Alternative enable SCR_DrawPleaseWait dialog
sv_packet_info // Enable packet info debugging information
sv_padPackets // add nop bytes to messages
sv_paused // Pause the server
sv_privateClients // Maximum number of private clients allowed on the server
sv_privateClientsForClients // The # of private clients (we send this to clients)
sv_reconnectlimit // minimum seconds between connect messages
sv_restoreDvars // Enable to restore Dvars on entering the Xbox Live menu
sv_running // Server is running
sv_showAverageBPS // Show average bytes per second for net debugging
sv_showPingSpam // Turns on ping info spam.
sv_smp // Enable server multithreading
sv_timeout // seconds without any message
sv_zombietime // seconds to sync messages after disconnect
systemlink // Current game is a system link game
systemlink_warning_shown // System Link Version Warning Shown
teamsplitter_verbose // Verbose debug output while splitting teams if true.
team_indicator // The team indicator modes : 0 - Full Name ; 1 - Abbreviated ; 2 - Icon Only
tickerHeaderWidth // The width of the ticker header text used to align the the ticker message.
tickerStandardWidth // Ticker message text standard width.
tickerWidescreenWidth // Ticker message text widescreen width.
timescale // Scale time of each frame
timeUntilDropRange // Range of how much time a glass shard will stay on the frame before falling
tmsFileFetchTryIntervalBase // Delay in seconds after file fetch fails to the next retry. Exponential growth each retry.
tmsFileFetchTryIntervalMax // Max delay in seconds between file fetch tries.
tmsFileFetchTryMaxAttempts // Max retry attempts before stopping altogether.
tree_bend // bend amount of tree trunk
tree_frequency // frequency of tree bend oscillation
tree_random // random addition to bend amount of tree trunk
turretPlayerAvoidScale // Auto turrets will try to avoid the player. They will not choose a target that is within a cone around the player. The diameter of the cone is the player's height, so the cone is smaller, the farther the player is from the turret. Use this dvar to scale the cone size.
turret_KillstreakTargetTime // Time in milliseconds that a TOW turret will stay locked on a target before verifying line of sight
turret_placement_debug // Enables turret placement debug lines
turret_placement_feet_offset // Position of the feet from the center axis.
turret_placement_feet_trace_dist_z // Max distance for a foot to be considered touching the ground
turret_placement_trace_dist // Distance along the trace axis where the turret will attempt to position itself
turret_placement_trace_maxs // maxs of the bound used for the placement trace
turret_placement_trace_mins // mins of the bound used for the placement trace
turret_placement_trace_min_normal // Minimum normal to accept a turret position
turret_placement_trace_pitch // Pitch used for the trace axis
turret_placement_trace_radius_canon_safety // Extra radius used in the forward direction to compensate for the canon length
turret_SentryTargetTime // Time in milliseconds that a sentry turret will stay locked on a target before verifying line of sight
turret_TargetLeadBias // The number of server frames used to predict an entity's position. Used for turret aiming when firing.
twar_captureAccelBonus "35"
twar_captureAccelLimit "50"
twar_captureTime "40"
twar_finalFightTimeLimit "5"
twar_momentumArtillery "100"
twar_momentumBlitzkriegTime "30"
twar_momentumDogs "100"
twar_momentumEnabled "1"
twar_momentumFlagCap "25"
twar_momentumKamikaze "100"
twar_momentumKillPlayer "5"
twar_momentumMax "70"
twar_momentumMaxMultiplier "3"
twar_momentumMultiplierBonus "25"
twar_momentumMultiplierBonusLimit "75"
twar_momentumRadar "100"
twar_neutralFlagLockTime "0"
typeWriterCod7LetterFXTime // Time it takes for a letter to come in.
uiscript_debug // spam debug info for the ui script
uiViewer_allowPitch // Allow the control of the camera pitch
uiViewer_attachment // Current weapon attachment index to show
uiViewer_customname
uiViewer_equipWeapon // weapon to equip the player (primary/secondary)
uiViewer_fov // UI Viewer horizontal field of view (degrees)
uiViewer_heroHighlight // use herolight to highlight the customized part
uiviewer_highlightColor1 // Highlight outline color #1 (pingpongs to color2)
uiviewer_highlightColor2 // Highlight outline color #2 (pingpongs to color1)
uiViewer_ingame // The viewer is displayed in-game (false is in the frontend)
uiViewer_lightMultiplier // UI Viewer model lighting multiplier
uiViewer_loaded // a flag for the menu that the viewer is loaded
uiViewer_mode // current uiViewer mode
uiViewer_pitchRange // Camera pitch range (x=minimum y=maximum)
uiViewer_playerCamera
uiViewer_sceneOrigin // Origin of the models in ui viewer
uiViewer_show // Enables rendering of the ui viewer
uiViewer_streaming // The UI viewer cannot draw since the model is streaming
uiViewer_weapon // Current weapon index to show
ui_3dwaypointtext "1"
ui_allowvote "1"
ui_allow_classchange // Whether the UI should allow changing class
ui_allow_controlschange "1"
ui_allow_teamchange // Whether the UI should allow changing team
ui_ammo_stock_width // Width of the ammo stock shown on the right.
ui_animSpeedScale // Scales the UI animation speed.
ui_attachment_highlighted "0"
ui_bg_image
ui_bigFont // Big font scale
ui_blurAmount // Max amount to blur background menu items.
ui_blurDarkenAmount // Max amount to darken the background menu items.
ui_borderLowLightScale // Scales the border color for the lowlight color on certain UI borders
ui_buildLocation // Where to draw the build number
ui_buildSize // Font size to use for the build number
ui_challengeGameMode
ui_challengeSort // Sort order for challenges
ui_choice_desc "@CUSTOM_GAME_TIME_LIMIT_DESC"
ui_cinematicsTimestamp // Shows cinematics timestamp on subtitle UI elements.
ui_clancardOpen // True when in game clancard is open.
ui_clanCountNotZero // Whether the player has any clan members.
ui_clanDescription
ui_clanName
ui_clanRecommendationCount // Number of players recommended to clan
ui_classesCurrentItemEquippedIn
ui_closeAfterPurchase // Whether an item has just been purchased and the item list needs to be closed.
ui_combatComparisonModeOn // True when comparing stats with other player in combat record
ui_combatCurrView // Current View in the combat record weapons tab.
ui_combatCurrViewNum // Current View number in the combat record weapons tab.
ui_combatHistogramCurrGametype // Current scroll bar Position for combat record
ui_combatOtherPlayerStatsAvailable // False when compared player has not played any public matches, or stats are corrupted, or could not be converted to current DDL.
ui_combatRecordOpen // True when Combat Record is Open.
ui_connectScreenTextGlowColor // Glow color applied to the mode and map name strings on the connect screen.
ui_currentMap // Current map index
ui_currentRecentPlayer // Selected recent player
ui_currentWeaponOptionGroup // Current weapon option group for the UI
ui_customClassName
ui_customclass_selected "9"
ui_customModeDesc "CUSTOM GAME MODE"
ui_customModeEditDesc "CUSTOM GAME MODE"
ui_customModeEditName "TEAM DEATHMATCH"
ui_customModeIndex // Custom game mode selected index into sharedUiInfo.customGameTypes
ui_customModeName
ui_custom_haschanged "1"
ui_custom_name "customclass1"
ui_custom_newname
ui_deathicontext "1"
ui_demoname
ui_drawCrosshair // Whether to draw crosshairs.
ui_dropdownButtonOffset // Used to calculate the Y offset of the dropdown buttons.
ui_dropdownListMax // Number of elements in list that opened dropdown.
ui_dropdownMax // Number of elements in the dropdown.
ui_dropdownOffset // Used to calculate the Y offset of the dropdown.
ui_ethernetLinkActive // true if a network connection is available(and active)
ui_extraBigFont "1.0"
ui_flownOut "0"
ui_flyoutHasFocus "0"
ui_friendCountNotZero // Whether the player has any friends.
ui_friendlyfire "0"
ui_friendsCombatRecordOpen // True when friend's or clan member's combat record is open.
ui_friendsListOpen // True when viewing Friends List.
ui_gametype "tdm"
ui_generic_status_bar "0"
ui_groupsCountNotZero // Whether whether the player is part of any group
ui_gv_reloadSpeedModifier // Adjusts the reload speed
ui_gv_rulecount // How many advanced game rules are created.
ui_heatMapColor // Heat Map Blob Color
ui_heatMapColorForPlayer // Heat Map Blob Color for player deaths only
ui_hint_text "@NULL_EMPTY"
ui_hostname "Dnicey CRAZY D"
ui_hud_hardcore // Whether the HUD should be suppressed for hardcore mode
ui_hud_obituaries "1"
ui_hud_showobjicons "1"
ui_hud_visible // Whether the 2D HUD should be displayed or not.
ui_ignoreMousePos // Whether there are multiple text entries in the menu.
ui_incomingProposalCount // Number of incoming clan requests
ui_incomingProposalCountNotZero // Whether there are any incoming proposals
ui_inside_popup "killstreaks"
ui_isClanMember // True when member belongs to clan
ui_isStoreOpen // Sets on/off based on whether store menu is open or closed.
ui_items_no_cost // Set to 1 if you want items to have no cost
ui_lastServerRefresh_0 "Nov 8, 2010 22:20"
ui_leaderboardFeederCountNotZero // Whether the leaderboard has any entry
ui_leaderboardOpen // True when viewing leaderboards
ui_listboxIndex // Current position in a listbox. Used to position associated drop down menu.
ui_lobbyLeaderBoard // True when we open leaderboard through lobby leaderboard.
ui_lobbypopup
ui_lobby_desc "Play a custom game over the local network."
ui_mapCount // Number of maps the player has
ui_mapname "mp_nuked"
ui_map_killstreak
ui_menuLvlNotify // If set, send code notification to script; default off
ui_motd
ui_mousePitch "0"
ui_mpTheaterEnabled "1"
ui_mptype "1"
ui_mpWagerMatchEnabled "1"
ui_multiplayer // True if the game is multiplayer
ui_multi_dt "1000"
ui_multi_s "0"
ui_netSource // The network source where:
ui_numPersonalBests // Number of personal bests to display in the AAR
ui_onCloseArgs
ui_onlineClanCount // Number of clan members online.
ui_options_open "0"
ui_partyFull // True if the current party is full.
ui_party_download_bar_color // Color of the party download progress bar.
ui_party_download_bar_height // Height of each download progress bar.
ui_playercardOpen // True when in game gamercard is open.
ui_playerListOpen // True when viewing recent met player List.
ui_playerNemesisColor // Nemesis background colour in lobbies
ui_playerPartyColor // The local player's font color when shown in lobbies and parties
ui_playerSquadColor // Squad Member background colour in lobbies
ui_preview "mp_nuked"
ui_prevTextEntryBox // Index of the previous text entry box.
ui_primary_highlighted "0"
ui_radar_client // Whether the UI should show radar to this client
ui_readingSaveDevice // Whether or not the reading save device menu is open.
ui_recentPlayerCountNotZero // Whether the player has any recent players.
ui_recommendedCountNotZero // Whether the clan has any recommended players.
ui_right_ammo_width // Width of the ammo shown on the right.
ui_scorelimit "7500"
ui_score_bar "0"
ui_serverStatusTimeOut // Time in milliseconds before a server status request times out
ui_showList // Show onscreen list of currently visible menus
ui_showmap "1"
ui_showMenuOnly
ui_show_arrow "0"
ui_show_preview "0"
ui_signedInToProfile // Whether or not the profile has been read.
ui_slot_count "3"
ui_smallFont // Small font scale
ui_stat_rankxp "0"
ui_storeOfferCountNotZero // Whether the store has any offers.
ui_text_endreason "MP_SCORE_LIMIT_REACHED"
ui_timelimit "10"
ui_totalClanMemberCount // Total number of players who are part of the clan.
ui_useCustomClassInfo // set to 1 to divert ui class functions to use custmo class data
ui_version_show "0"
ui_xboxLiveCountNotZero // Whether there are any players in the xbox live party
ui_xboxLivePartyListOpen // Whether the xbox live party tab is open.
ui_xpText "1"
unbindall
unbindallaxis
updateInfoLastFetchTime // Time in milliseconds of the last update related to friends,clan,recent met players being called.
updateRefreshInGameStoretLastFetchTime // Time in milliseconds of the last update for in-game store
useMapPreloading // Whether to start loading the map before connecting to server
usePackFiles // Read midmip .tex files out of .pak files (for shipping and xfetch/disks/testing)
useSvMapPreloading // Whether to start loading the map before starting the server
useWalkPathnodesMode // Special nodes walking all pathnodes in the map
vehanim_debug // Show debug information for vehicle anims
vehanim_enable // Enable player vehicle anims
vehControlMode // Changes the vehicle controls and camera mode
vehGunnerSplashDamage // Percentage of projectile and grenade splash damage that vehicle gunners take.
vehHelicopterAlwaysFaceCamera // Setting this will have the helicopter always face the same direction as the camera.
vehHelicopterAlwaysFaceCameraRate // How quickly the helicopter catches up to the camera.
vehHelicopterboundMapHeight // Helicopter Bounding height.
vehHelicopterboundMapLowerRightX // Helicopter Bounding box.
vehHelicopterboundMapLowerRightY // Helicopter Bounding box.
vehHelicopterboundMapUpperLeftX // Helicopter Bounding box.
vehHelicopterboundMapUpperLeftY // Helicopter Bounding box.
vehHelicopterboundsOn // Heli bounds on/off.
vehHelicopterDecelerationFwd // Set the deceleration of the player helicopter (as a fraction of acceleration) in the direction the chopper is facing. So 1.0 makes it equal to the acceleration.
vehHelicopterDecelerationSide // Set the side-to-side deceleration of the player helicopter (as a fraction of acceleration). So 1.0 makes it equal to the acceleration.
vehHelicopterDefaultPitch // Set the default pitch of the helicopter.
vehHelicopterFreeLook // Allow free look with left trigger.
vehHelicopterHeadSwayDontSwayTheTurret // If set, the turret will not fire through the crosshairs, but straight ahead of the vehicle, when the player is not freelooking.
vehHelicopterHoverSpeedThreshold // The speed below which the player helicopter begins to jitter the tilt, for hovering
vehHelicopterInvertUpDown // Invert the altitude control on the player helicopter.
vehHelicopterJitterJerkyness // Specifies how jerky the tilt jitter should be
vehHelicopterLookaheadTime // How far ahead (in seconds) the player helicopter looks ahead, to avoid hard collisions. (Like driving down the highway, you should keep 2 seconds distance between you and the vehicle in front of you)
vehHelicopterMaxAccelVertical // Maximum vertical acceleration of the player helicopter (in MPH per second)
vehHelicopterMaxSpeedVertical // Maximum vertical speed of the player helicopter (in MPH)
vehHelicopterPathTransitionTime // How quickly the helicopter transitions from driving path to locked path.
vehHelicopterRightStickDeadzone // Dead-zone for the axes of the right thumbstick. This helps to better control the two axes separately.
vehHelicopterRotDecel // Set the rotational deceleration or dampening for the helicopter.
vehHelicopterScaleMovement // Scales down the smaller of the left stick axes.
vehHelicopterSoftCollisions // Player helicopters have soft collisions (slow down before they collide).
vehHelicopterStrafeDeadzone // Dead-zone so that you can fly straight forward easily without accidentally strafing (and thus rolling).
vehHelicopterTiltFromControllerAxes // The amount of tilt caused by the desired velocity (i.e., the amount of controller stick deflection)
vehHelicopterTiltFromFwdAndYaw // The amount of roll caused by yawing while moving forward.
vehHelicopterTiltFromFwdAndYaw_VelAtMaxTilt // The forward speed (as a fraction of top speed) at which the tilt due to yaw reaches is maximum value.
vehHelicopterTiltFromViewangles // The amount of tilt caused by the current velocity
vehHelicopterTiltMomentum // The amount of rotational momentum the helicopter has with regards to tilting.
vehHelicopterYawAltitudeControls // Determines how to control yaw and altitude
vehHelicopterYawOnLeftStick // The yaw speed created by the left stick when pushing the stick diagonally (e.g., moving forward and strafing slightly).
vehicle_damage_bouncing_betty // Bouncing betty damage for vehicles.
vehicle_damage_bullet // Bullet damage for vehicles.
vehicle_damage_grenade // Grenade damage for vehicles.
vehicle_damage_max_shielding // Percent of core damage that armor can shield.
vehicle_damage_projectile // Projectile damage for vehicles.
vehicle_damage_satchel_charge // Satchel charge damage for vehicles.
vehicle_damage_sticky_grenade // Sticky grenade damage for vehicles.
vehicle_damage_zone_front // Front zone damage for vehicles.
vehicle_damage_zone_rear // Rear zone damage for vehicles.
vehicle_damage_zone_side // Side zone damage for vehicles.
vehicle_damage_zone_under // Bottom zone damage for vehicles.
vehicle_destructible_damage_bouncing_betty // Bouncing betty damage for destructible armor on vehicles.
vehicle_destructible_damage_bouncing_betty_radius // Radius for bouncing betty damage for destructible armor on vehicles.
vehicle_destructible_damage_grenade // Grenade damage for destructible armor on vehicles.
vehicle_destructible_damage_grenade_radius // Radius for grenade damage for destructible armor on vehicles.
vehicle_destructible_damage_projectile_radius // Radius for projectile damage for destructible armor on vehicles.
vehicle_destructible_damage_satchel_charge // Satchel charge damage for destructible armor on vehicles.
vehicle_destructible_damage_satchel_charge_radius // Radius for satchel charge damage for destructible armor on vehicles.
vehicle_destructible_damage_sticky_grenade // Sticky grenade damage for destructible armor on vehicles.
vehicle_destructible_damage_sticky_grenade_radius // Radius for sticky grenade damage for destructible armor on vehicles.
vehicle_perk_boost_duration_seconds // Vehicle perk boost duration in seconds.
vehicle_perk_leadfoot_speed_increase // Vehicle perk leadfoot speed increase percentage.
vehicle_piece_damagesfx_threshold // Minimum amount of damage for which a destructible piece damageSound SFX will be played.
vehicle_push_during_mantle // Enable player mantling
vehicle_riding // Turning this on enables players to walk around on top of vehicles
vehicle_selfCollision // Enabled the vehicle to shoot itself with it's own turret.
vehicle_sounds_cutoff // Use to turn of the vehicle sounds if the distance between the camera and the vehicle is more than this value
vehicle_switch_seat_delay // Delay before player can switch seats again.
vehicle_useRadius // The radius within which a player can enter a vehicle
vehLocationalVehicleSeatEntry // Assigns the player seat based on the entry location, NOT first in first available position
vehLockTurretToPlayerView // Locks the turret angles to the player angles and sets the players rotation speed to the turrets rotRate
vehPlaneFakeLiftForce // Fake lift force on aircraft. Adds extra pitch when non-horizontal.
vehPlaneGravityForce // Gravity force on aircraft.
vehPlaneLiftForce // Lift force on aircraft.
vehPlaneLowSpeed // Min speed.
vehPlanePitchAccel // Adjustable rotation scaler.
vehPlaneRollAccel // Adjustable rotation scaler.
vehPlaneRollDeadZone // Roll input dead zone. Percentage of stick movement to ignore for roll.
vehPlaneYawFromRollScale // Adjustable rotation scaler.
vehPlaneYawSpeed // Adjustable rotation scaler.
vehRecenterDelay // Specifies a delay in msec, before triggering the camera auto-centering functionality in idle mode
version "Call of Duty Multiplayer - Ship COD_T5_S MP build 7.0.54 CL(760254) CODLOCS-V64 Mon Sep 27 20:50:05 2010 xenon"
visionstore_glowTweakBloomCutoff "0.5"
visionstore_glowTweakBloomDesaturation "0"
visionstore_glowTweakBloomIntensity0 "1"
visionstore_glowTweakBloomIntensity1
visionstore_glowTweakEnable "0"
visionstore_glowTweakRadius0 "5"
visionstore_glowTweakRadius1
visionstore_glowTweakSkyBleedIntensity0
visionstore_glowTweakSkyBleedIntensity1
wagerCategory // The wager category number
wagerCategoryPlaylist // The wager playlist index in the category
waitForStreamer // 1) wait for initial lowmips, 2) wait for full initial texture load.
waitOnStatsTimeout // Time in seconds to wait for stats to be fetched while dev mapping.
waterbrush_entity // CM_GetWaterHeight function will test against this enitty. Can be used on brushmodels to move the water level
waypointDebugDraw
waypointDistFade // Distance to start fading waypoints when the player is ADS
waypointDistScaleRangeMax // Distance from player that icon distance scaling ends.
waypointDistScaleRangeMin // Distance from player that icon distance scaling starts.
waypointDistScaleSmallest // Smallest scale that the distance effect uses.
waypointIconHeight // Height of the offscreen pointer.
waypointIconWidth // Width of the offscreen pointer.
waypointOffscreenCornerRadius // Size of the rounded corners.
waypointOffscreenDistanceThresholdAlpha // Distance from the threshold over which offscreen objective icons lerp their alpha.
waypointOffscreenPadBottom // Offset from the edge.
waypointOffscreenPadLeft // Offset from the edge.
waypointOffscreenPadRight // Offset from the edge.
waypointOffscreenPadTop // Offset from the edge.
waypointOffscreenPointerDistance // Distance from the center of the offscreen objective icon to the center its arrow.
waypointOffscreenPointerHeight // Height of the offscreen pointer.
waypointOffscreenPointerWidth // Width of the offscreen pointer.
waypointOffscreenRoundedCorners // Off-screen icons take rounded corners when true. 90-degree corners when false.
waypointOffscreenScaleLength // How far the offscreen icon scale travels from full to smallest scale.
waypointOffscreenScaleSmallest // Smallest scale that the offscreen effect uses.
waypointPlayerOffsetCrouch // For waypoints pointing to players, how high to offset off of their origin when they are crouching.
waypointPlayerOffsetProne // For waypoints pointing to players, how high to offset off of their origin when they are prone.
waypointPlayerOffsetRevive // For waypoints pointing to players, how high to offset off of their origin when they are in last stand.
waypointPlayerOffsetStand // For waypoints pointing to players, how high to offset off of their origin when they are standing.
waypointSplitscreenScale // Scale applied to waypoint icons in splitscreen views.
waypointTimeFade // Time in ms to fade waypoints the player is ADS
waypointTweakY
weaponCamoLodDist // Distance to stop drawing the weapon camo.
weaponClanTagLodDist // Distance to stop drawing the weapon clan tag.
weaponEmblemLodDist // Distance to stop drawing the weapon emblem.
welcome_shown "0"
wideScreen // True if the game video is running in 16x9 aspect, false if 4x3.
wind_debug_display // shows wind debug display
wind_global_hi_altitude // altitude of global hi-level wind
wind_global_low_altitude // altitude of global low-level wind
wind_global_low_strength_percent // strength of global low-level wind, expressed as a percentage of wind_global_vector
wind_global_vector // global wind force in units/sec. This is also the hi-level wind
wind_grass_gustinterval // global wind force gust interval
wind_grass_gust_distance // max distance at which to place gusts
wind_grass_gust_radius // size of global wind gust effector
wind_grass_gust_speed // speed multiplier for gusts
wind_grass_gust_strength // percentage to bump the wind in a gust
wind_grass_scale // global wind force scaler
wind_grass_tension // global wind grass tension (stiffness)
wind_leaf_scale // global wind grass tension (stiffness)
wind_local_amplitude // localized wind amplitude
wind_local_frequency // frequency of tree bend oscillation
wind_local_gust_radius // size of local wind gust effector
wind_local_gust_strength // percentage to bump the wind in a local gust
wind_local_vector // localized wind force in units/sec
xblive_allmappacks // Set to true if the player has all the content packs available
xblive_anymappacks // Set to true if the player has any content packs
xblive_basictraining // Current game is basic training
xblive_basictraining_popup // The user has seen the basic training popup description
xblive_clanListChanged // Clan list gets updated
xblive_clanmatch // Current game is a clan match
xblive_contentpath "D:"
xblive_enablePadsForMarketplace // Allow the blade to work for controllers 2 - 4
xblive_friendsPresenceChanged // Friend presence info needs to be updated
xblive_hostingprivateparty // true only if we're hosting a party
xblive_livePresenceChanged // Clan and recent met player list presence info needs to be updated
xblive_loggedin // User is logged into xbox live
xblive_mappacks // 0 = original maps only, 1 = new maps only, 2 = both original and new
xblive_matchEndingSoon // True if the match is ending soon
xblive_privatematch // Current game is a private match
xblive_privatepartyclient // true only if we're in a party and not the host
xblive_rankedmatch // Current game is a ranked match
xblive_showmarketplace // true if the player doesn't have all the map packs
xblive_theater // Current game is a theater mode
xblive_wagermatch // Current game is a wager match
xenonGame "true"
xenon_getTitleXnAddrTimeSecs // Amount of time it tries (seconds) to retrieve the title's Xbox 360 network address before giving up. -1 means it will try till it fails or succeeds
xenon_maxVoicePacketsPerSec // Max voice packets per second a client will send
xenon_maxVoicePacketsPerSecForServer // Max voice packets per second the server will send
xenon_sysUIActive // Gets set when we open the Xbox System UI
xenon_voiceDebug // Debug voice communication
xenon_voiceDegrade // Degrade voice quality
xfriendsListFilter // Used for displaying appropriate list of friends
zombiefive_discovered // Zombie Five map discovered
zombiefive_norandomchar // Forces no random character when following the end game credits
zombiemode // Current game is an zombie game
zombieStopSplitScreen // Force Split Screen to Fullscreen (for HUD)
zombietron // Current game is an zombietron top down game
zombietron_discovered // Zombietron mode discovered